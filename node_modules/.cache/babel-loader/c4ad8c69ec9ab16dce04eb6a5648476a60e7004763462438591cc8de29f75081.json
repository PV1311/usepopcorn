{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\verma\\\\OneDrive\\\\Desktop\\\\Web Dev Adv\\\\React\\\\React\\\\07-usepopcorn\\\\starter\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport StarRating from \"./StarRating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst average = arr => arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);\nconst KEY = \"f608407f\";\nexport default function App() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [watched, setWatched] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [selectedId, setSelectedId] = useState(null);\n  function handleSelectMovie(id) {\n    setSelectedId(selectedId => id === selectedId ? null : id);\n  }\n  function handleCloseMovie() {\n    setSelectedId(null);\n  }\n  function handleAddWatch(movie) {\n    setWatched(watched => [...watched, movie]);\n\n    // local storage is just a very simple key value pair storage that is available in the browser and where we can store some data for each domain:\n    // adding the watch list in local storage:\n    // localStorage.setItem(\"watched\", JSON.stringify([...watched, movie])); // we simply call localstorage which is simply a function available in all browsers. Then we set item using setItem(). Inside setItem(), we pass in the name of the key(so basically the name of the data that we want to store) and the actual data(now for actual data we cannot actually just use watched array by simply writing watched because it has just been updated in the just above line inside setWatched() and that updating happens in an asynchronous way so right here in setItem(), it would be stale state. So we do the same thing as we did in setWatched() just above i.e. [...watched, movie]). Now finally we need to convert this actual data to string because in local storage we can only store key value pairs where the vale is a string. So we use the built in JSON.stringify(). Now, once we add the movies and reload the page we don't see the added movies on the page because we also have to read the added movies from local storage but we can see the added movies in local storage in Application tab in chrome dev tools\n\n    // Now we could also add this watch list to local storage in an effect instead of here in the event handler function, and we will actually do it in an effect instead of here because later in this section(Section 13), we will want to make this storing data into local storage, reusable.\n  }\n\n  function handleDeleteWatch(id) {\n    setWatched(watched => watched.filter(movie => movie.imdbID !== id));\n  }\n\n  // Now we are going to use local storage for our watched list so that on page reload, our watched list persisits. We are going to do this in 2 parts - first, each time the watched list state(watched state which is an array) is updated, we will update the local storage and then each time that the application loads, so when the app component first mounts, we will read that data from local storage and store it into the watched state. So we start with the first part which is storing watched movies in the local storage and we can do that in 2 different ways, or 2 different places. So the first option is to store that data into local storage each time that a new movie is actually added in the watched list, so right in the handleAddWatched() event handler function above that is responsible for adding new movies to the watch list. So each time that happens, we can then store the new watch list into the local storage. The 2nd option is to simply do it in an effect and we will actually do it in an effect instead of here because later in this section(Section 13), we will want to make this storing data into local storage, reusable. (for learning purpose, we did it in the above handleAddWatched() function too).\n\n  // below is the effect for local storage:\n  useEffect(function () {\n    localStorage.setItem(\"watched\", JSON.stringify(watched));\n  }, [watched] // we want this effect to run each time the eatched movies are updated so we passed watched state in dependency array\n  );\n\n  useEffect(function () {\n    const controller = new AbortController();\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        setError(\"\");\n        const res = await fetch(`http://www.omdbapi.com/?apiKey=${KEY}&s=${query}`, {\n          signal: controller.signal\n        });\n        if (!res.ok) throw new Error(\"Something went wrong with fetching movies!\");\n        const data = await res.json();\n        // console.log(data);\n\n        if (data.Response === \"False\") throw new Error(\"Movie not found !\");\n        setMovies(data.Search);\n        // console.log(movies);\n\n        setError(\"\");\n      } catch (err) {\n        // console.error(err.message);\n\n        if (err.name !== \"AbortError\") {\n          console.log(err.message);\n          setError(err.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    if (!query.length) {\n      setMovies([]);\n      setError(\"\");\n      return;\n    }\n    handleCloseMovie();\n    fetchMovies(); // here we just call the function\n\n    // Cleanup function:\n    return function () {\n      controller.abort();\n    };\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        query: query,\n        setQuery: setQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NumResults, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), !isLoading && !error && /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: movies,\n          onSelectMovie: handleSelectMovie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          message: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: selectedId ? /*#__PURE__*/_jsxDEV(MovieDetails, {\n          selectedId: selectedId,\n          onCloseMovie: handleCloseMovie,\n          onAddWatched: handleAddWatch,\n          watched: watched\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this) // based on selectedId, we display the movie details on the right box of\n        :\n        /*#__PURE__*/\n        //              screen\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WatchedSummary, {\n            watched: watched\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(WatchedMoviesList, {\n            watched: watched,\n            onDeleteWatched: handleDeleteWatch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) // if no selectedId is false, i.e. there os no selected movie, we display this React Fragment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"FNhO8JUpIiA3qYJe7dgTpyqDUg0=\");\n_c = App;\nfunction Loader() {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"loader\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Loader;\nfunction ErrorMessage(_ref) {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u26D4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), \" \", message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_c3 = ErrorMessage;\nfunction NavBar(_ref2) {\n  let {\n    children\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"nav-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_c4 = NavBar;\nfunction Logo() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logo\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      role: \"img\",\n      children: \"\\uD83C\\uDF7F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"usePopcorn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_c5 = Logo;\nfunction Search(_ref3) {\n  let {\n    query,\n    setQuery\n  } = _ref3;\n  // const [query, setQuery] = useState(\"\");\n\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    className: \"search\",\n    type: \"text\",\n    placeholder: \"Search movies...\",\n    value: query,\n    onChange: e => setQuery(e.target.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_c6 = Search;\nfunction NumResults(_ref4) {\n  let {\n    movies\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"num-results\",\n    children: [\"Found \", /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: movies.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), \" results\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n_c7 = NumResults;\nfunction Main(_ref5) {\n  let {\n    children\n  } = _ref5;\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 10\n  }, this);\n}\n_c8 = Main;\nfunction Box(_ref6) {\n  _s2();\n  let {\n    children\n  } = _ref6;\n  // instead of using children prop to solve prop drilling, we can also use an explicit pro (like element we used here instead of children)\n\n  const [isOpen, setIsOpen] = useState(true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-toggle\",\n      onClick: () => setIsOpen(open => !open),\n      children: isOpen ? \"–\" : \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), isOpen && children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n\n/*\nfunction WatchedBox() {\n  const [watched, setWatched] = useState(tempWatchedData);\n  const [isOpen2, setIsOpen2] = useState(true);\n\n  return (\n    <div className=\"box\">\n      <button\n        className=\"btn-toggle\"\n        onClick={() => setIsOpen2((open) => !open)}\n      >\n        {isOpen2 ? \"–\" : \"+\"}\n      </button>\n      {isOpen2 && (\n        <>\n          <WatchedSummary watched={watched} />\n          <WatchedMoviesList watched={watched} />\n        </>\n      )}\n    </div>\n  );\n}\n*/\n_s2(Box, \"mEi83NlPXQzy/XIDfTYWzOSvaHw=\");\n_c9 = Box;\nfunction MovieList(_ref7) {\n  let {\n    movies,\n    onSelectMovie\n  } = _ref7;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"list list-movies\",\n    children: movies === null || movies === void 0 ? void 0 : movies.map(movie => /*#__PURE__*/_jsxDEV(Movie, {\n      movie: movie,\n      onSelectMovie: onSelectMovie\n    }, movie.imdbID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_c10 = MovieList;\nfunction Movie(_ref8) {\n  let {\n    movie,\n    onSelectMovie\n  } = _ref8;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    onClick: () => onSelectMovie(movie.imdbID),\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: movie.Poster,\n      alt: `${movie.Title} poster`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: movie.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDDD3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: movie.Year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n}\n_c11 = Movie;\nfunction MovieDetails(_ref9) {\n  _s3();\n  var _watched$find;\n  let {\n    selectedId,\n    onCloseMovie,\n    onAddWatched,\n    watched\n  } = _ref9;\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [userRating, setUserRating] = useState(\"\");\n  const isWatched = watched.map(movie => movie.imdbID).includes(selectedId);\n  const watchedUserRating = (_watched$find = watched.find(movie => movie.imdbID === selectedId)) === null || _watched$find === void 0 ? void 0 : _watched$find.userRating;\n  const {\n    Title: title,\n    Year: year,\n    Poster: poster,\n    Runtime: runtime,\n    imdbRating,\n    Plot: plot,\n    Released: released,\n    Actors: actors,\n    Director: director,\n    Genre: genre\n  } = movie;\n\n  // // Lec 16. THE RULES OF HOOKS IN PRACTICE:\n\n  // // So lets do as just below(returning a hook conditionally) and then call hook after an early return below it. VSCode will immediately complain and tell us that just below we are not allowed to use useState conditionally. But we can disable this rule by writing eslint-disable inside /* */:\n  // /* disable eslint here(write eslint-disable) */\n  // if (imdbRating > 8) [isTop, setIsTop] = useState(true); // Now, searching interstellar and selecting interstellar wars (2016), we now have no problem as we can see in the component tree that MovieDetails components still has the 6 hooks(3 states from top level and 3 effects). That's because its rating is just 1.7. But now when we click interstellar (2014), our application immediately stops working. On console we can see the error that React has detected a change in the order of Hooks called by MovieDetails. It also tells some useful information. So in the previous render, there were 3 useState hooks and then the number 4 was an effect and that previous render actually happened after we clicked on the movie but while the movie had not been fetched yet. So at that point the imdbRating here was still undefined and so then the useState hook here was not called. But as soon as the data arrived, the imdbRating was indeed greater than 8 and the then React called the useState here and so then on the next render, the 4th hook was no longer the useEffect but this useState from here. So now clearly we see that our linked list of hooks is different\n\n  // // Now one more thing that can happen is an early return:\n  // if (imdbRating > 8) return <p>Greatest ever!</p>; // Doing this will now give an error saying Rendered fewer hooks than expected and that's because we now have the three states from the top level but now, the 3 effects that we had are no longer created because of this early return. So instead of the 6 hooks, we now only have 3 hooks. So this again creates a big problem.\n\n  // // Lec 17. MORE DETAILS OF useState:\n  // // NOTE: in the useState hooks, the initial state that we pass only really matters on the initial render\n  // // So lets say we wanted something like if (imdbRating > 8) [isTop, setIsTop] = useState(true); to work here. So we wanted a piece of state called isTop which is true if the imdbRating is greater than 8. Now we cannot do if (imdbRating > 8) [isTop, setIsTop] = useState(true); as we already learned just above, but we might think that the just below line works:\n  // // const [isTop, setIsTop] = useState(imdbRating > 8);\n  // // console.log(isTop); // Now when we search for a movie(lets say interstellar) and select it, then we see that false is logged on console and it comes from this console.log() and false is logged even though the rating is actually greater than 8 and if we look at our list of hooks from the component tree, then we see that this state(which is the 4th state there) is false. This is because of the reason that whatever we pass into useState is the initial state and React will only look at this initial state on the initial render(so when the component first mounts). However, when the component first mounts here, the imdbRating will still be undefined and so the imdbRating > 8 that we passed inside useState here will be false and it will stay false forever because nowhere we update the state, and on second render, when we finally get tha movie data, this imdbRating > 8 that we passed in useState will not be executed again. So therefore, again, it will stay false forever. Now one way of fixing this would be useEffect as in the just below line:\n  // // useEffect(\n  // //   function () {\n  // //     setIsTop(imdbRating > 8); // In this case, now the above isTop is true when we select interstellar movie. We can even see the 4th state in the component tree, which will now be true.\n  // //   },\n  // //   [imdbRating] // we want to run this effect each time the imdbRating is changed so we passed it in dependency array\n  // // );\n  // // Now, ofcourse in this situation, we shouldn't even use a piece of state in the first place. So if the just above functionality of the state is what we really wanted then what we should do is derived state. So we should just do as in the just below line:\n  // const isTop2 = imdbRating > 8; // (in lecture just above code wass commented and variable here was isTop but I used isTop2 variable here)\n  // console.log(isTop2); // we see that this simple code for isTop2 derived state works seamlessly (So when we select interstellar movie, true is logged from this consol.log()). This is because this imdbRating variable here is generated each time that the function here is executed, so after each render.(So this is the power of derived stae, So it gets updated as the component gets re-rendered.)\n\n  // // Now below we show another example that updating state is synchronous:\n  // // For that, lets say we create a new state just below for displaying the average of the rating that we gave and the rating that is coming from IMDB, right there instead of closing the movie immediately. So for that we also comment the onCloseMovie() function call at the end of the handleAdd() function below:\n  // const [averageRating, setAverageRating] = useState(0); // we render it in the returned JSX between the <header></header> element and <section></section> element. This is just for learning purpose so whatever we are doing just now,we will comment it afterwards. So now, when we click on the + Add to list button, the handleAdd() function below is executed and then we actually set this averageRating state over there.(Some theory is written there too)\n\n  function handleAdd() {\n    const newWatchedMovie = {\n      imdbID: selectedId,\n      title,\n      year,\n      poster,\n      imdbRating: Number(imdbRating),\n      runtime: Number(runtime.split(\" \").at(0)),\n      userRating\n    };\n    onAddWatched(newWatchedMovie);\n    onCloseMovie();\n\n    // setAverageRating(Number(imdbRating)); // first we set it to the actual current IMDB rating which is a string so we convert it to number. Now we alert the averageRating just below:\n    // // alert(averageRating); // Now, on clicking, + Add to list button on interstellar movie, instead of 8.6(it's IMDB rating), 0 is alerted. That's again, because the state is set asynchronously just above(or in other words, we do not get access to the updated state, right after doing that. So right after we call the state updating function). So only once React is done processing this event handler, it will then update our state and re-render our UI. Now in the just below line, we write logic for actually setting averageRating\n    // // setAverageRating((averageRating + userRating) / 2); // after doing this, if we now, give 10 rating to interstellar movie and click on + Add to list button, then we see 5 rating set on the screen right below the movie poster. So our average is not correctly being calculated. So that 5 wee see on screen is really just 10/2. Reason for that is that here in this setAverageRating() function, averageRating is still at zero and so then (0 + 10)/2 is 5. But averageRating is still at 0 here even though we have updated it before is because its' asynchronous state setting which means that at this point here, inside this setAverageRating() function, averageRating has not been set yet, So it is still at 0 which is the initial value right inside useState() where we defined this state. Because of that we say that averageRating is stale at this point. but we can solve this by passing in a callback function. So we comment this line and fix in the just below line\n    // setAverageRating((averageRating) => (averageRating + userRating) / 2); // Now we get the correct average.\n  }\n\n  useEffect(function () {\n    function Callback(e) {\n      if (e.code === \"Escape\") onCloseMovie();\n      // console.log(\"CLOSING\");\n    }\n\n    document.addEventListener(\"keydown\", Callback);\n    return function () {\n      document.removeEventListener(\"keydown\", Callback);\n    };\n  }, [onCloseMovie]);\n  useEffect(function () {\n    async function getMovieDetails() {\n      setIsLoading(true);\n      const res = await fetch(`http://www.omdbapi.com/?apiKey=${KEY}&i=${selectedId}`);\n      const data = await res.json();\n      // console.log(data);\n      setMovie(data);\n      setIsLoading(false);\n    }\n    getMovieDetails();\n  }, [selectedId]);\n  useEffect(function () {\n    //we can change the title of the page in the browser just by setting document.title\n    if (!title) return;\n    document.title = `Movie | ${title}`;\n\n    // Cleanup function(A cleanup function is simply a function that we return from an effect):\n    return function () {\n      document.title = \"usePopcorn\";\n      // console.log(`Cleanup effect for movie ${title}`);\n    };\n  }, [title]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"details\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-back\",\n          onClick: onCloseMovie,\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: poster,\n          alt: `Poster of ${movie} movie`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"details-overview\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [released, \" \\u2022 \", runtime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: genre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2B50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this), imdbRating, \" IMDB rating\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rating\",\n          children: !isWatched ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(StarRating, {\n              maxRating: 10,\n              size: 24,\n              onSetRating: setUserRating\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 19\n            }, this), userRating > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-add\",\n              onClick: handleAdd,\n              children: \"+ Add to list\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You rated this movie \", watchedUserRating, /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2B50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: plot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Starring \", actors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Directed by \", director]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n}\n_s3(MovieDetails, \"K+jTNQ+OvxXJVp/lmgUi0FIU46s=\");\n_c12 = MovieDetails;\nfunction WatchedSummary(_ref10) {\n  let {\n    watched\n  } = _ref10;\n  const avgImdbRating = average(watched.map(movie => movie.imdbRating));\n  const avgUserRating = average(watched.map(movie => movie.userRating));\n  const avgRuntime = average(watched.map(movie => movie.runtime));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"summary\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movies you watched\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [watched.length, \" movies\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u2B50\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: avgImdbRating.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83C\\uDF1F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: avgUserRating.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u23F3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [avgRuntime, \" min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n}\n_c13 = WatchedSummary;\nfunction WatchedMoviesList(_ref11) {\n  let {\n    watched,\n    onDeleteWatched\n  } = _ref11;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"list\",\n    children: watched.map(movie => /*#__PURE__*/_jsxDEV(WatchedMovie, {\n      movie: movie,\n      onDeleteWatched: onDeleteWatched\n    }, movie.imdbID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 496,\n    columnNumber: 5\n  }, this);\n}\n_c14 = WatchedMoviesList;\nfunction WatchedMovie(_ref12) {\n  let {\n    movie,\n    onDeleteWatched\n  } = _ref12;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: movie.poster,\n      alt: `${movie.title} poster`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: movie.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u2B50\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: movie.imdbRating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83C\\uDF1F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: movie.userRating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u23F3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [movie.runtime, \" min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-delete\",\n        onClick: () => onDeleteWatched(movie.imdbID)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 510,\n    columnNumber: 5\n  }, this);\n}\n_c15 = WatchedMovie;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Loader\");\n$RefreshReg$(_c3, \"ErrorMessage\");\n$RefreshReg$(_c4, \"NavBar\");\n$RefreshReg$(_c5, \"Logo\");\n$RefreshReg$(_c6, \"Search\");\n$RefreshReg$(_c7, \"NumResults\");\n$RefreshReg$(_c8, \"Main\");\n$RefreshReg$(_c9, \"Box\");\n$RefreshReg$(_c10, \"MovieList\");\n$RefreshReg$(_c11, \"Movie\");\n$RefreshReg$(_c12, \"MovieDetails\");\n$RefreshReg$(_c13, \"WatchedSummary\");\n$RefreshReg$(_c14, \"WatchedMoviesList\");\n$RefreshReg$(_c15, \"WatchedMovie\");","map":{"version":3,"names":["useEffect","useState","StarRating","jsxDEV","_jsxDEV","Fragment","_Fragment","average","arr","reduce","acc","cur","i","length","KEY","App","_s","query","setQuery","movies","setMovies","watched","setWatched","isLoading","setIsLoading","error","setError","selectedId","setSelectedId","handleSelectMovie","id","handleCloseMovie","handleAddWatch","movie","handleDeleteWatch","filter","imdbID","localStorage","setItem","JSON","stringify","controller","AbortController","fetchMovies","res","fetch","signal","ok","Error","data","json","Response","Search","err","name","console","log","message","abort","children","NavBar","fileName","_jsxFileName","lineNumber","columnNumber","NumResults","Main","Box","Loader","MovieList","onSelectMovie","ErrorMessage","MovieDetails","onCloseMovie","onAddWatched","WatchedSummary","WatchedMoviesList","onDeleteWatched","_c","className","_c2","_ref","_c3","_ref2","Logo","_c4","role","_c5","_ref3","type","placeholder","value","onChange","e","target","_c6","_ref4","_c7","_ref5","_c8","_ref6","_s2","isOpen","setIsOpen","onClick","open","_c9","_ref7","map","Movie","_c10","_ref8","src","Poster","alt","Title","Year","_c11","_ref9","_s3","_watched$find","setMovie","userRating","setUserRating","isWatched","includes","watchedUserRating","find","title","year","poster","Runtime","runtime","imdbRating","Plot","plot","Released","released","Actors","actors","Director","director","Genre","genre","handleAdd","newWatchedMovie","Number","split","at","Callback","code","document","addEventListener","removeEventListener","getMovieDetails","maxRating","size","onSetRating","_c12","_ref10","avgImdbRating","avgUserRating","avgRuntime","toFixed","_c13","_ref11","WatchedMovie","_c14","_ref12","_c15","$RefreshReg$"],"sources":["C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport StarRating from \"./StarRating\";\n\nconst average = (arr) =>\n  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);\n\nconst KEY = \"f608407f\";\n\nexport default function App() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [watched, setWatched] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [error, setError] = useState(\"\");\n\n  const [selectedId, setSelectedId] = useState(null);\n\n  function handleSelectMovie(id) {\n    setSelectedId((selectedId) => (id === selectedId ? null : id));\n  }\n\n  function handleCloseMovie() {\n    setSelectedId(null);\n  }\n\n  function handleAddWatch(movie) {\n    setWatched((watched) => [...watched, movie]);\n\n    // local storage is just a very simple key value pair storage that is available in the browser and where we can store some data for each domain:\n    // adding the watch list in local storage:\n    // localStorage.setItem(\"watched\", JSON.stringify([...watched, movie])); // we simply call localstorage which is simply a function available in all browsers. Then we set item using setItem(). Inside setItem(), we pass in the name of the key(so basically the name of the data that we want to store) and the actual data(now for actual data we cannot actually just use watched array by simply writing watched because it has just been updated in the just above line inside setWatched() and that updating happens in an asynchronous way so right here in setItem(), it would be stale state. So we do the same thing as we did in setWatched() just above i.e. [...watched, movie]). Now finally we need to convert this actual data to string because in local storage we can only store key value pairs where the vale is a string. So we use the built in JSON.stringify(). Now, once we add the movies and reload the page we don't see the added movies on the page because we also have to read the added movies from local storage but we can see the added movies in local storage in Application tab in chrome dev tools\n\n    // Now we could also add this watch list to local storage in an effect instead of here in the event handler function, and we will actually do it in an effect instead of here because later in this section(Section 13), we will want to make this storing data into local storage, reusable.\n  }\n\n  function handleDeleteWatch(id) {\n    setWatched((watched) => watched.filter((movie) => movie.imdbID !== id));\n  }\n\n  // Now we are going to use local storage for our watched list so that on page reload, our watched list persisits. We are going to do this in 2 parts - first, each time the watched list state(watched state which is an array) is updated, we will update the local storage and then each time that the application loads, so when the app component first mounts, we will read that data from local storage and store it into the watched state. So we start with the first part which is storing watched movies in the local storage and we can do that in 2 different ways, or 2 different places. So the first option is to store that data into local storage each time that a new movie is actually added in the watched list, so right in the handleAddWatched() event handler function above that is responsible for adding new movies to the watch list. So each time that happens, we can then store the new watch list into the local storage. The 2nd option is to simply do it in an effect and we will actually do it in an effect instead of here because later in this section(Section 13), we will want to make this storing data into local storage, reusable. (for learning purpose, we did it in the above handleAddWatched() function too).\n\n  // below is the effect for local storage:\n  useEffect(\n    function () {\n      localStorage.setItem(\"watched\", JSON.stringify(watched));\n    },\n    [watched] // we want this effect to run each time the eatched movies are updated so we passed watched state in dependency array\n  );\n\n  useEffect(\n    function () {\n      const controller = new AbortController();\n\n      async function fetchMovies() {\n        try {\n          setIsLoading(true);\n\n          setError(\"\");\n\n          const res = await fetch(\n            `http://www.omdbapi.com/?apiKey=${KEY}&s=${query}`,\n            { signal: controller.signal }\n          );\n\n          if (!res.ok)\n            throw new Error(\"Something went wrong with fetching movies!\");\n\n          const data = await res.json();\n          // console.log(data);\n\n          if (data.Response === \"False\") throw new Error(\"Movie not found !\");\n\n          setMovies(data.Search);\n          // console.log(movies);\n\n          setError(\"\");\n        } catch (err) {\n          // console.error(err.message);\n\n          if (err.name !== \"AbortError\") {\n            console.log(err.message);\n            setError(err.message);\n          }\n        } finally {\n          setIsLoading(false);\n        }\n      }\n\n      if (!query.length) {\n        setMovies([]);\n        setError(\"\");\n        return;\n      }\n\n      handleCloseMovie();\n      fetchMovies(); // here we just call the function\n\n      // Cleanup function:\n      return function () {\n        controller.abort();\n      };\n    },\n    [query]\n  );\n  return (\n    <>\n      <NavBar>\n        <Search query={query} setQuery={setQuery} />\n        <NumResults movies={movies} />\n      </NavBar>\n      <Main>\n        {/* <Box element={<MovieList movies={movies} />} />\n        <Box\n          element={\n            <>\n              <WatchedSummary watched={watched} />\n              <WatchedMoviesList watched={watched} />\n            </>\n          }\n        /> */}\n        {/* Above is prop drilling solution using explicity prop (element in this case. It can be anything. So we pass element as prop instead of children in the Box\n            component and conditionally render that element prop). In the 2nd <Box /> component above, we are passing a brand new piece of JSX, so here now we actually\n            need a fragment */}\n\n        {/* Below is prop drilling solution using children prop */}\n\n        <Box>\n          {/* {isLoading ? <Loader /> : <MovieList movies={movies} />} */}\n          {isLoading && <Loader />}\n          {!isLoading && !error && (\n            <MovieList movies={movies} onSelectMovie={handleSelectMovie} />\n          )}\n          {error && <ErrorMessage message={error} />}\n        </Box>\n\n        <Box>\n          {selectedId ? (\n            <MovieDetails\n              selectedId={selectedId}\n              onCloseMovie={handleCloseMovie}\n              onAddWatched={handleAddWatch}\n              watched={watched}\n            /> // based on selectedId, we display the movie details on the right box of\n          ) : (\n            //              screen\n            <>\n              <WatchedSummary watched={watched} />\n              <WatchedMoviesList\n                watched={watched}\n                onDeleteWatched={handleDeleteWatch}\n              />\n            </> // if no selectedId is false, i.e. there os no selected movie, we display this React Fragment\n          )}\n        </Box>\n      </Main>\n    </>\n  );\n}\n\nfunction Loader() {\n  return <p className=\"loader\">Loading...</p>;\n}\n\nfunction ErrorMessage({ message }) {\n  return (\n    <p className=\"error\">\n      <span>⛔</span> {message}\n    </p>\n  );\n}\n\nfunction NavBar({ children }) {\n  return (\n    <nav className=\"nav-bar\">\n      <Logo />\n      {children}\n    </nav>\n  );\n}\n\nfunction Logo() {\n  return (\n    <div className=\"logo\">\n      <span role=\"img\">🍿</span>\n      <h1>usePopcorn</h1>\n    </div>\n  );\n}\n\nfunction Search({ query, setQuery }) {\n  // const [query, setQuery] = useState(\"\");\n\n  return (\n    <input\n      className=\"search\"\n      type=\"text\"\n      placeholder=\"Search movies...\"\n      value={query}\n      onChange={(e) => setQuery(e.target.value)}\n    />\n  );\n}\n\nfunction NumResults({ movies }) {\n  return (\n    <p className=\"num-results\">\n      Found <strong>{movies.length}</strong> results\n    </p>\n  );\n}\n\nfunction Main({ children }) {\n  return <main className=\"main\">{children}</main>;\n}\n\nfunction Box({ children }) {\n  // instead of using children prop to solve prop drilling, we can also use an explicit pro (like element we used here instead of children)\n\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div className=\"box\">\n      <button className=\"btn-toggle\" onClick={() => setIsOpen((open) => !open)}>\n        {isOpen ? \"–\" : \"+\"}\n      </button>\n      {isOpen && children}\n    </div>\n  );\n}\n\n/*\nfunction WatchedBox() {\n  const [watched, setWatched] = useState(tempWatchedData);\n  const [isOpen2, setIsOpen2] = useState(true);\n\n  return (\n    <div className=\"box\">\n      <button\n        className=\"btn-toggle\"\n        onClick={() => setIsOpen2((open) => !open)}\n      >\n        {isOpen2 ? \"–\" : \"+\"}\n      </button>\n      {isOpen2 && (\n        <>\n          <WatchedSummary watched={watched} />\n          <WatchedMoviesList watched={watched} />\n        </>\n      )}\n    </div>\n  );\n}\n*/\n\nfunction MovieList({ movies, onSelectMovie }) {\n  return (\n    <ul className=\"list list-movies\">\n      {movies?.map((movie) => (\n        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie} />\n      ))}\n    </ul>\n  );\n}\n\nfunction Movie({ movie, onSelectMovie }) {\n  return (\n    <li onClick={() => onSelectMovie(movie.imdbID)}>\n      <img src={movie.Poster} alt={`${movie.Title} poster`} />\n      <h3>{movie.Title}</h3>\n      <div>\n        <p>\n          <span>🗓</span>\n          <span>{movie.Year}</span>\n        </p>\n      </div>\n    </li>\n  );\n}\n\nfunction MovieDetails({ selectedId, onCloseMovie, onAddWatched, watched }) {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [userRating, setUserRating] = useState(\"\");\n\n  const isWatched = watched.map((movie) => movie.imdbID).includes(selectedId);\n\n  const watchedUserRating = watched.find(\n    (movie) => movie.imdbID === selectedId\n  )?.userRating;\n\n  const {\n    Title: title,\n    Year: year,\n    Poster: poster,\n    Runtime: runtime,\n    imdbRating,\n    Plot: plot,\n    Released: released,\n    Actors: actors,\n    Director: director,\n    Genre: genre,\n  } = movie;\n\n  // // Lec 16. THE RULES OF HOOKS IN PRACTICE:\n\n  // // So lets do as just below(returning a hook conditionally) and then call hook after an early return below it. VSCode will immediately complain and tell us that just below we are not allowed to use useState conditionally. But we can disable this rule by writing eslint-disable inside /* */:\n  // /* disable eslint here(write eslint-disable) */\n  // if (imdbRating > 8) [isTop, setIsTop] = useState(true); // Now, searching interstellar and selecting interstellar wars (2016), we now have no problem as we can see in the component tree that MovieDetails components still has the 6 hooks(3 states from top level and 3 effects). That's because its rating is just 1.7. But now when we click interstellar (2014), our application immediately stops working. On console we can see the error that React has detected a change in the order of Hooks called by MovieDetails. It also tells some useful information. So in the previous render, there were 3 useState hooks and then the number 4 was an effect and that previous render actually happened after we clicked on the movie but while the movie had not been fetched yet. So at that point the imdbRating here was still undefined and so then the useState hook here was not called. But as soon as the data arrived, the imdbRating was indeed greater than 8 and the then React called the useState here and so then on the next render, the 4th hook was no longer the useEffect but this useState from here. So now clearly we see that our linked list of hooks is different\n\n  // // Now one more thing that can happen is an early return:\n  // if (imdbRating > 8) return <p>Greatest ever!</p>; // Doing this will now give an error saying Rendered fewer hooks than expected and that's because we now have the three states from the top level but now, the 3 effects that we had are no longer created because of this early return. So instead of the 6 hooks, we now only have 3 hooks. So this again creates a big problem.\n\n  // // Lec 17. MORE DETAILS OF useState:\n  // // NOTE: in the useState hooks, the initial state that we pass only really matters on the initial render\n  // // So lets say we wanted something like if (imdbRating > 8) [isTop, setIsTop] = useState(true); to work here. So we wanted a piece of state called isTop which is true if the imdbRating is greater than 8. Now we cannot do if (imdbRating > 8) [isTop, setIsTop] = useState(true); as we already learned just above, but we might think that the just below line works:\n  // // const [isTop, setIsTop] = useState(imdbRating > 8);\n  // // console.log(isTop); // Now when we search for a movie(lets say interstellar) and select it, then we see that false is logged on console and it comes from this console.log() and false is logged even though the rating is actually greater than 8 and if we look at our list of hooks from the component tree, then we see that this state(which is the 4th state there) is false. This is because of the reason that whatever we pass into useState is the initial state and React will only look at this initial state on the initial render(so when the component first mounts). However, when the component first mounts here, the imdbRating will still be undefined and so the imdbRating > 8 that we passed inside useState here will be false and it will stay false forever because nowhere we update the state, and on second render, when we finally get tha movie data, this imdbRating > 8 that we passed in useState will not be executed again. So therefore, again, it will stay false forever. Now one way of fixing this would be useEffect as in the just below line:\n  // // useEffect(\n  // //   function () {\n  // //     setIsTop(imdbRating > 8); // In this case, now the above isTop is true when we select interstellar movie. We can even see the 4th state in the component tree, which will now be true.\n  // //   },\n  // //   [imdbRating] // we want to run this effect each time the imdbRating is changed so we passed it in dependency array\n  // // );\n  // // Now, ofcourse in this situation, we shouldn't even use a piece of state in the first place. So if the just above functionality of the state is what we really wanted then what we should do is derived state. So we should just do as in the just below line:\n  // const isTop2 = imdbRating > 8; // (in lecture just above code wass commented and variable here was isTop but I used isTop2 variable here)\n  // console.log(isTop2); // we see that this simple code for isTop2 derived state works seamlessly (So when we select interstellar movie, true is logged from this consol.log()). This is because this imdbRating variable here is generated each time that the function here is executed, so after each render.(So this is the power of derived stae, So it gets updated as the component gets re-rendered.)\n\n  // // Now below we show another example that updating state is synchronous:\n  // // For that, lets say we create a new state just below for displaying the average of the rating that we gave and the rating that is coming from IMDB, right there instead of closing the movie immediately. So for that we also comment the onCloseMovie() function call at the end of the handleAdd() function below:\n  // const [averageRating, setAverageRating] = useState(0); // we render it in the returned JSX between the <header></header> element and <section></section> element. This is just for learning purpose so whatever we are doing just now,we will comment it afterwards. So now, when we click on the + Add to list button, the handleAdd() function below is executed and then we actually set this averageRating state over there.(Some theory is written there too)\n\n  function handleAdd() {\n    const newWatchedMovie = {\n      imdbID: selectedId,\n      title,\n      year,\n      poster,\n      imdbRating: Number(imdbRating),\n      runtime: Number(runtime.split(\" \").at(0)),\n      userRating,\n    };\n    onAddWatched(newWatchedMovie);\n    onCloseMovie();\n\n    // setAverageRating(Number(imdbRating)); // first we set it to the actual current IMDB rating which is a string so we convert it to number. Now we alert the averageRating just below:\n    // // alert(averageRating); // Now, on clicking, + Add to list button on interstellar movie, instead of 8.6(it's IMDB rating), 0 is alerted. That's again, because the state is set asynchronously just above(or in other words, we do not get access to the updated state, right after doing that. So right after we call the state updating function). So only once React is done processing this event handler, it will then update our state and re-render our UI. Now in the just below line, we write logic for actually setting averageRating\n    // // setAverageRating((averageRating + userRating) / 2); // after doing this, if we now, give 10 rating to interstellar movie and click on + Add to list button, then we see 5 rating set on the screen right below the movie poster. So our average is not correctly being calculated. So that 5 wee see on screen is really just 10/2. Reason for that is that here in this setAverageRating() function, averageRating is still at zero and so then (0 + 10)/2 is 5. But averageRating is still at 0 here even though we have updated it before is because its' asynchronous state setting which means that at this point here, inside this setAverageRating() function, averageRating has not been set yet, So it is still at 0 which is the initial value right inside useState() where we defined this state. Because of that we say that averageRating is stale at this point. but we can solve this by passing in a callback function. So we comment this line and fix in the just below line\n    // setAverageRating((averageRating) => (averageRating + userRating) / 2); // Now we get the correct average.\n  }\n\n  useEffect(\n    function () {\n      function Callback(e) {\n        if (e.code === \"Escape\") onCloseMovie();\n        // console.log(\"CLOSING\");\n      }\n\n      document.addEventListener(\"keydown\", Callback);\n\n      return function () {\n        document.removeEventListener(\"keydown\", Callback);\n      };\n    },\n    [onCloseMovie]\n  );\n\n  useEffect(\n    function () {\n      async function getMovieDetails() {\n        setIsLoading(true);\n        const res = await fetch(\n          `http://www.omdbapi.com/?apiKey=${KEY}&i=${selectedId}`\n        );\n\n        const data = await res.json();\n        // console.log(data);\n        setMovie(data);\n        setIsLoading(false);\n      }\n      getMovieDetails();\n    },\n    [selectedId]\n  );\n\n  useEffect(\n    function () {\n      //we can change the title of the page in the browser just by setting document.title\n      if (!title) return;\n      document.title = `Movie | ${title}`;\n\n      // Cleanup function(A cleanup function is simply a function that we return from an effect):\n      return function () {\n        document.title = \"usePopcorn\";\n        // console.log(`Cleanup effect for movie ${title}`);\n      };\n    },\n    [title]\n  );\n\n  return (\n    <div className=\"details\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <header>\n            <button className=\"btn-back\" onClick={onCloseMovie}>\n              &larr;\n            </button>\n            <img src={poster} alt={`Poster of ${movie} movie`} />\n            <div className=\"details-overview\">\n              <h2>{title}</h2>\n              <p>\n                {released} &bull; {runtime}\n              </p>\n              <p>{genre}</p>\n              <p>\n                <span>⭐</span>\n                {imdbRating} IMDB rating\n              </p>\n            </div>\n          </header>\n\n          {/* <p>{averageRating}</p> */}\n\n          <section>\n            <div className=\"rating\">\n              {!isWatched ? (\n                <>\n                  <StarRating\n                    maxRating={10}\n                    size={24}\n                    onSetRating={setUserRating}\n                  />\n\n                  {userRating > 0 && (\n                    <button className=\"btn-add\" onClick={handleAdd}>\n                      {/* here we passed another handler that will call the one we passed into this MovieDetails component(the onAddWatched prop that we passed) because\n                          we need to do a lot of things in it */}\n                      + Add to list\n                    </button>\n                  )}\n                </>\n              ) : (\n                <p>\n                  You rated this movie {watchedUserRating}\n                  <span>⭐</span>\n                </p>\n              )}\n            </div>\n            <p>\n              <em>{plot}</em>\n            </p>\n            <p>Starring {actors}</p>\n            <p>Directed by {director}</p>\n          </section>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction WatchedSummary({ watched }) {\n  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));\n  const avgUserRating = average(watched.map((movie) => movie.userRating));\n  const avgRuntime = average(watched.map((movie) => movie.runtime));\n\n  return (\n    <div className=\"summary\">\n      <h2>Movies you watched</h2>\n      <div>\n        <p>\n          <span>#️⃣</span>\n          <span>{watched.length} movies</span>\n        </p>\n        <p>\n          <span>⭐️</span>\n          <span>{avgImdbRating.toFixed(2)}</span>\n        </p>\n        <p>\n          <span>🌟</span>\n          <span>{avgUserRating.toFixed(2)}</span>\n        </p>\n        <p>\n          <span>⏳</span>\n          <span>{avgRuntime} min</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction WatchedMoviesList({ watched, onDeleteWatched }) {\n  return (\n    <ul className=\"list\">\n      {watched.map((movie) => (\n        <WatchedMovie\n          movie={movie}\n          key={movie.imdbID}\n          onDeleteWatched={onDeleteWatched}\n        />\n      ))}\n    </ul>\n  );\n}\n\nfunction WatchedMovie({ movie, onDeleteWatched }) {\n  return (\n    <li>\n      <img src={movie.poster} alt={`${movie.title} poster`} />\n      <h3>{movie.title}</h3>\n      <div>\n        <p>\n          <span>⭐️</span>\n          <span>{movie.imdbRating}</span>\n        </p>\n        <p>\n          <span>🌟</span>\n          <span>{movie.userRating}</span>\n        </p>\n        <p>\n          <span>⏳</span>\n          <span>{movie.runtime} min</span>\n        </p>\n\n        <button\n          className=\"btn-delete\"\n          onClick={() => onDeleteWatched(movie.imdbID)}\n        ></button>\n      </div>\n    </li>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}