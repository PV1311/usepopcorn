{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\verma\\\\OneDrive\\\\Desktop\\\\Web Dev Adv\\\\React\\\\React\\\\07-usepopcorn\\\\starter\\\\src\\\\StarRating.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: \"16px\"\n}; // this object will never change and it doesn't depend on anything that is in the StarRating component. So we place it here completely outside of the component. So now this object will not have to be generated by JS each time the StarRating component is rendered. It will be created only once when the module is loaded.\n\n// Below is style for the stars container.\nconst starsContainerStyle = {\n  display: \"flex\"\n};\nconst textStyle = {\n  lineHeight: \"1\",\n  margin: \"0\"\n};\n\n// we want to allow the user of this StarRating component to set the maximum amount of stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating component as prop to set a default value of 5 stars in case the user does not set the max amount of stars\nexport default function StarRating(_ref) {\n  _s();\n  let {\n    maxRating = 5\n  } = _ref;\n  const [rating, setRating] = useState(0); // this state is used because whenever we click on one of the stars, then we want to display the current rating in the paragraph element. We need to listen for click event on each of the stars so we define a onRate prop in each of the <Star /> component genereated from Array.from() and we will later receive inside the Star component function and pass it in OnClick prop. If we click a star, then from staring upto that star, all stars should be full and rest of the stars should be empty. So, in the Star component function, we receive a full prop which will tell if the star is full and we conditionally render the full and empty stars based on it.\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on hover we temporarirly get a rating corresponding to the star we are hovering on and also accordingly the stars appear full or empty. rating and full stars get fixed only on clicking. We handle this hover event in the Star component function where we handle the click event by defining a onMouseEnter prop\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: starsContainerStyle,\n      children: Array.from({\n        length: maxRating\n      }, (_, i) => /*#__PURE__*/_jsxDEV(Star, {\n        onRate: () => setRating(i + 1),\n        full: rating >= i + 1 // this full prop needs to be a true or false value for conditional rendering of full or empty stars in the Star component function. so for each star, current rating is compared with star index + 1. if rating >= index + 1 for a star then that star is full.\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: textStyle,\n      children: rating || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(StarRating, \"lvI7d+3256Wuw7l9nzLjbn4KzE0=\");\n_c = StarRating;\nconst starStyle = {\n  width: \"48px\",\n  height: \"48px\",\n  display: \"block\",\n  cursor: \"pointer\"\n};\nfunction Star(_ref2) {\n  let {\n    onRate,\n    full\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    role: \"button\",\n    style: starStyle,\n    onClick: onRate,\n    children: full ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      fill: \"#000\",\n      stroke: \"#000\",\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: \"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"none\",\n      viewBox: \"0 0 24 24\",\n      stroke: \"#000\",\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"{2}\",\n        d: \"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\n_c2 = Star;\nvar _c, _c2;\n$RefreshReg$(_c, \"StarRating\");\n$RefreshReg$(_c2, \"Star\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","containerStyle","display","alignItems","gap","starsContainerStyle","textStyle","lineHeight","margin","StarRating","_ref","_s","maxRating","rating","setRating","tempRating","setTempRating","style","children","Array","from","length","_","i","Star","onRate","full","fileName","_jsxFileName","lineNumber","columnNumber","_c","starStyle","width","height","cursor","_ref2","role","onClick","xmlns","viewBox","fill","stroke","d","strokeLinecap","strokeLinejoin","strokeWidth","_c2","$RefreshReg$"],"sources":["C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/src/StarRating.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst containerStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  gap: \"16px\",\r\n}; // this object will never change and it doesn't depend on anything that is in the StarRating component. So we place it here completely outside of the component. So now this object will not have to be generated by JS each time the StarRating component is rendered. It will be created only once when the module is loaded.\r\n\r\n// Below is style for the stars container.\r\nconst starsContainerStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\nconst textStyle = {\r\n  lineHeight: \"1\",\r\n  margin: \"0\",\r\n};\r\n\r\n// we want to allow the user of this StarRating component to set the maximum amount of stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating component as prop to set a default value of 5 stars in case the user does not set the max amount of stars\r\nexport default function StarRating({ maxRating = 5 }) {\r\n  const [rating, setRating] = useState(0); // this state is used because whenever we click on one of the stars, then we want to display the current rating in the paragraph element. We need to listen for click event on each of the stars so we define a onRate prop in each of the <Star /> component genereated from Array.from() and we will later receive inside the Star component function and pass it in OnClick prop. If we click a star, then from staring upto that star, all stars should be full and rest of the stars should be empty. So, in the Star component function, we receive a full prop which will tell if the star is full and we conditionally render the full and empty stars based on it.\r\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on hover we temporarirly get a rating corresponding to the star we are hovering on and also accordingly the stars appear full or empty. rating and full stars get fixed only on clicking. We handle this hover event in the Star component function where we handle the click event by defining a onMouseEnter prop\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <div style={starsContainerStyle}>\r\n        {Array.from({ length: maxRating }, (_, i) => (\r\n          <Star\r\n            key={i}\r\n            onRate={() => setRating(i + 1)}\r\n            full={rating >= i + 1} // this full prop needs to be a true or false value for conditional rendering of full or empty stars in the Star component function. so for each star, current rating is compared with star index + 1. if rating >= index + 1 for a star then that star is full.\r\n          />\r\n        ))}\r\n      </div>\r\n      <p style={textStyle}>{rating || \"\"}</p>\r\n      {/* If rating is a falsy value(i.e. 0) then we will display empty string(i.e.) nothing on the screen */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst starStyle = {\r\n  width: \"48px\",\r\n  height: \"48px\",\r\n  display: \"block\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nfunction Star({ onRate, full }) {\r\n  return (\r\n    <span role=\"button\" style={starStyle} onClick={onRate}>\r\n      {full ? (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"#000\"\r\n          stroke=\"#000\"\r\n        >\r\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"#000\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"{2}\"\r\n            d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n          />\r\n        </svg>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,cAAc,GAAG;EACrBC,OAAO,EAAE,MAAM;EACfC,UAAU,EAAE,QAAQ;EACpBC,GAAG,EAAE;AACP,CAAC,CAAC,CAAC;;AAEH;AACA,MAAMC,mBAAmB,GAAG;EAC1BH,OAAO,EAAE;AACX,CAAC;AAED,MAAMI,SAAS,GAAG;EAChBC,UAAU,EAAE,GAAG;EACfC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,eAAe,SAASC,UAAUA,CAAAC,IAAA,EAAoB;EAAAC,EAAA;EAAA,IAAnB;IAAEC,SAAS,GAAG;EAAE,CAAC,GAAAF,IAAA;EAClD,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEjD,oBACEE,OAAA;IAAKiB,KAAK,EAAEhB,cAAe;IAAAiB,QAAA,gBACzBlB,OAAA;MAAKiB,KAAK,EAAEZ,mBAAoB;MAAAa,QAAA,EAC7BC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAET;MAAU,CAAC,EAAE,CAACU,CAAC,EAAEC,CAAC,kBACtCvB,OAAA,CAACwB,IAAI;QAEHC,MAAM,EAAEA,CAAA,KAAMX,SAAS,CAACS,CAAC,GAAG,CAAC,CAAE;QAC/BG,IAAI,EAAEb,MAAM,IAAIU,CAAC,GAAG,CAAE,CAAC;MAAA,GAFlBA,CAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAIT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACN9B,OAAA;MAAGiB,KAAK,EAAEX,SAAU;MAAAY,QAAA,EAAEL,MAAM,IAAI;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEnC;AAEV;AAACnB,EAAA,CAnBuBF,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AAqBlC,MAAMuB,SAAS,GAAG;EAChBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,MAAM;EACdhC,OAAO,EAAE,OAAO;EAChBiC,MAAM,EAAE;AACV,CAAC;AAED,SAASX,IAAIA,CAAAY,KAAA,EAAmB;EAAA,IAAlB;IAAEX,MAAM;IAAEC;EAAK,CAAC,GAAAU,KAAA;EAC5B,oBACEpC,OAAA;IAAMqC,IAAI,EAAC,QAAQ;IAACpB,KAAK,EAAEe,SAAU;IAACM,OAAO,EAAEb,MAAO;IAAAP,QAAA,EACnDQ,IAAI,gBACH1B,OAAA;MACEuC,KAAK,EAAC,4BAA4B;MAClCC,OAAO,EAAC,WAAW;MACnBC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,MAAM;MAAAxB,QAAA,eAEblB,OAAA;QAAM2C,CAAC,EAAC;MAA0V;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACjW,gBAEN9B,OAAA;MACEuC,KAAK,EAAC,4BAA4B;MAClCE,IAAI,EAAC,MAAM;MACXD,OAAO,EAAC,WAAW;MACnBE,MAAM,EAAC,MAAM;MAAAxB,QAAA,eAEblB,OAAA;QACE4C,aAAa,EAAC,OAAO;QACrBC,cAAc,EAAC,OAAO;QACtBC,WAAW,EAAC,KAAK;QACjBH,CAAC,EAAC;MAAyW;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC3W;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEL;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BAiB,GAAA,GA/BSvB,IAAI;AAAA,IAAAO,EAAA,EAAAgB,GAAA;AAAAC,YAAA,CAAAjB,EAAA;AAAAiB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}