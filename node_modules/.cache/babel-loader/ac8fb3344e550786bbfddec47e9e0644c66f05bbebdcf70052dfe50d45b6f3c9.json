{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\verma\\\\OneDrive\\\\Desktop\\\\Web Dev Adv\\\\React\\\\React\\\\07-usepopcorn\\\\starter\\\\src\\\\StarRating.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: \"16px\"\n}; // this object will never change and it doesn't depend on anything that is in the StarRating component. So we place it here completely outside of the component. So now this object will not have to be generated by JS each time the StarRating component is rendered. It will be created only once when the module is loaded.\n\n// Below is style for the stars container.\nconst starsContainerStyle = {\n  display: \"flex\"\n};\n\n// we want to allow the user of this StarRating component to set the maximum amount of stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating component as prop to set a default value of 5 stars in case the user does not set the max amount of stars. We also improve reusability with props(i.e. defining a public API for consumers to use it (Watch Lecture 118 - Props as a component API for better understanding. Also lecture 119 - Improvong reusability with props))\nexport default function StarRating(_ref) {\n  _s();\n  let {\n    maxRating = 5,\n    color = \"#fcc419\",\n    size = 48\n  } = _ref;\n  const [rating, setRating] = useState(0); // this state is used because whenever we click on one of the stars, then we want to display the current rating in the paragraph element. We need to listen for click event on each of the stars so we define a onRate prop in each of the <Star /> component genereated from Array.from() and we will later receive inside the Star component function and pass it in OnClick prop. If we click a star, then from staring upto that star, all stars should be full and rest of the stars should be empty. So, in the Star component function, we receive a full prop which will tell if the star is full and we conditionally render the full and empty stars based on it.\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on hover we temporarirly get a rating corresponding to the star we are hovering on and also accordingly the stars appear full or empty. rating and full stars get fixed only on clicking. We handle this hover event in the Star component function by passing a handler function through onHoverIn prop and onHoverOut prop in the Star component in Array.from() and receive them in the Star component function and use inside a onMouseEnter prop and also a onMouseLeave prop.\n\n  function handleRating(rating) {\n    setRating(rating);\n  }\n  const textStyle = {\n    lineHeight: \"1\",\n    margin: \"0\",\n    color,\n    fontSize: `${size}px`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: starsContainerStyle,\n      children: Array.from({\n        length: maxRating\n      }, (_, i) => /*#__PURE__*/_jsxDEV(Star, {\n        onRate: () => handleRating(i + 1),\n        full: tempRating ? tempRating >= i + 1 : rating >= i + 1 // this full prop needs to be a true or false value for conditional rendering of full or empty stars in the Star component function. so for each star, current rating is compared with star index + 1. if rating >= index + 1 for a star then that star is full. Also, on hovering, only tempRating works and when we click then full and empty stars get fixed. So, if there is tempRating, then it works otherwise rating works. So if we click on a star then full and empty stars and correct rating are shown accordingly but if we hover again then again tempRating is there so tempRating now works and on hovering, the stars from starting upto that star appear hovered and the rating that should be if we click that star appear but if we stop hovering on any star, then again the fixed full and empty stars with the fixed rating that was done before due to click appear again. Similarly where we display rating, we do tempRating || rating || \"\"\n        ,\n        onHoverIn: () => setTempRating(i + 1) // here we just have to set the tempRating to the rating of the current star on hover.\n        ,\n        onHoverOut: () => setTempRating(0) // on hover out, we set tempRating back to initial value\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: textStyle,\n      children: tempRating || rating || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(StarRating, \"lvI7d+3256Wuw7l9nzLjbn4KzE0=\");\n_c = StarRating;\nconst starStyle = {\n  width: \"48px\",\n  height: \"48px\",\n  display: \"block\",\n  cursor: \"pointer\"\n};\nfunction Star(_ref2) {\n  let {\n    onRate,\n    full,\n    onHoverIn,\n    onHoverOut\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    role: \"button\",\n    style: starStyle,\n    onClick: onRate,\n    onMouseEnter: onHoverIn,\n    onMouseLeave: onHoverOut,\n    children: full ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      fill: \"#000\",\n      stroke: \"#000\",\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: \"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"none\",\n      viewBox: \"0 0 24 24\",\n      stroke: \"#000\",\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"{2}\",\n        d: \"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\n_c2 = Star;\nvar _c, _c2;\n$RefreshReg$(_c, \"StarRating\");\n$RefreshReg$(_c2, \"Star\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","containerStyle","display","alignItems","gap","starsContainerStyle","StarRating","_ref","_s","maxRating","color","size","rating","setRating","tempRating","setTempRating","handleRating","textStyle","lineHeight","margin","fontSize","style","children","Array","from","length","_","i","Star","onRate","full","onHoverIn","onHoverOut","fileName","_jsxFileName","lineNumber","columnNumber","_c","starStyle","width","height","cursor","_ref2","role","onClick","onMouseEnter","onMouseLeave","xmlns","viewBox","fill","stroke","d","strokeLinecap","strokeLinejoin","strokeWidth","_c2","$RefreshReg$"],"sources":["C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/src/StarRating.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst containerStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  gap: \"16px\",\r\n}; // this object will never change and it doesn't depend on anything that is in the StarRating component. So we place it here completely outside of the component. So now this object will not have to be generated by JS each time the StarRating component is rendered. It will be created only once when the module is loaded.\r\n\r\n// Below is style for the stars container.\r\nconst starsContainerStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\n// we want to allow the user of this StarRating component to set the maximum amount of stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating component as prop to set a default value of 5 stars in case the user does not set the max amount of stars. We also improve reusability with props(i.e. defining a public API for consumers to use it (Watch Lecture 118 - Props as a component API for better understanding. Also lecture 119 - Improvong reusability with props))\r\nexport default function StarRating({\r\n  maxRating = 5,\r\n  color = \"#fcc419\",\r\n  size = 48,\r\n}) {\r\n  const [rating, setRating] = useState(0); // this state is used because whenever we click on one of the stars, then we want to display the current rating in the paragraph element. We need to listen for click event on each of the stars so we define a onRate prop in each of the <Star /> component genereated from Array.from() and we will later receive inside the Star component function and pass it in OnClick prop. If we click a star, then from staring upto that star, all stars should be full and rest of the stars should be empty. So, in the Star component function, we receive a full prop which will tell if the star is full and we conditionally render the full and empty stars based on it.\r\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on hover we temporarirly get a rating corresponding to the star we are hovering on and also accordingly the stars appear full or empty. rating and full stars get fixed only on clicking. We handle this hover event in the Star component function by passing a handler function through onHoverIn prop and onHoverOut prop in the Star component in Array.from() and receive them in the Star component function and use inside a onMouseEnter prop and also a onMouseLeave prop.\r\n\r\n  function handleRating(rating) {\r\n    setRating(rating);\r\n  }\r\n\r\n  const textStyle = {\r\n    lineHeight: \"1\",\r\n    margin: \"0\",\r\n    color,\r\n    fontSize: `${size}px`,\r\n  };\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <div style={starsContainerStyle}>\r\n        {Array.from({ length: maxRating }, (_, i) => (\r\n          <Star\r\n            key={i}\r\n            onRate={() => handleRating(i + 1)}\r\n            full={tempRating ? tempRating >= i + 1 : rating >= i + 1} // this full prop needs to be a true or false value for conditional rendering of full or empty stars in the Star component function. so for each star, current rating is compared with star index + 1. if rating >= index + 1 for a star then that star is full. Also, on hovering, only tempRating works and when we click then full and empty stars get fixed. So, if there is tempRating, then it works otherwise rating works. So if we click on a star then full and empty stars and correct rating are shown accordingly but if we hover again then again tempRating is there so tempRating now works and on hovering, the stars from starting upto that star appear hovered and the rating that should be if we click that star appear but if we stop hovering on any star, then again the fixed full and empty stars with the fixed rating that was done before due to click appear again. Similarly where we display rating, we do tempRating || rating || \"\"\r\n            onHoverIn={() => setTempRating(i + 1)} // here we just have to set the tempRating to the rating of the current star on hover.\r\n            onHoverOut={() => setTempRating(0)} // on hover out, we set tempRating back to initial value\r\n          />\r\n        ))}\r\n      </div>\r\n      <p style={textStyle}>{tempRating || rating || \"\"}</p>\r\n      {/* If rating is a falsy value(i.e. 0) then we will display empty string(i.e.) nothing on the screen */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst starStyle = {\r\n  width: \"48px\",\r\n  height: \"48px\",\r\n  display: \"block\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nfunction Star({ onRate, full, onHoverIn, onHoverOut }) {\r\n  return (\r\n    <span\r\n      role=\"button\"\r\n      style={starStyle}\r\n      onClick={onRate}\r\n      onMouseEnter={onHoverIn}\r\n      onMouseLeave={onHoverOut}\r\n    >\r\n      {full ? (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"#000\"\r\n          stroke=\"#000\"\r\n        >\r\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"#000\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"{2}\"\r\n            d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n          />\r\n        </svg>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}