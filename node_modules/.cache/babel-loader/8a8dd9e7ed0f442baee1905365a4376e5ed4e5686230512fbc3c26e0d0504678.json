{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport function useLocalStorageState(initialState) {\n  _s();\n  const [value, setValue] = useState(function () {\n    // Here we gave generic names like value and setValue because the idea of this hook is to easily reuse it in other projects\n    const storedValue = localStorage.getItem(\"watched\");\n    return JSON.parse(storedValue);\n  });\n  useEffect(function () {\n    localStorage.setItem(\"watched\", JSON.stringify(watched)); // now we don't have to create a new array like [...watched, movie] that we created while doing same this in handleAddWatched() function because this effect will only run after the movies have already been updated.\n  }, [watched] // we want this effect to run each time the eatched movies are updated so we passed watched state in dependency array. Also, now we can see that on deleting a movie from watched list on screen(so deleting a movie from watched array), it also gets deleted from local storage. This is because thanks to our effect here, we have effectively synchronized the watched state with our local storage. So when the watched state changes, our local storage changes as well. So this is a great advantage of using useEffect() hook instead of setting local storage in the event handler because then we would also have to manually set local storage in the handleDeleteWatched() function as we delete a movie. Now if we did so, there to inside setItem(), in place of actual data, instead of writing watched directly(so using watched state directly), we would have to write watched.filter((movie) => movie.imdbID !== id)(This is how we set in the setWatched in the handleDeleteWatched() function)\n  );\n}\n_s(useLocalStorageState, \"CrFJdudrUNHLxsyVxJs9iVWo4zc=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorageState","initialState","_s","value","setValue","storedValue","localStorage","getItem","JSON","parse","setItem","stringify","watched"],"sources":["C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/src/useLocalStorageState.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport function useLocalStorageState(initialState) {\r\n  const [value, setValue] = useState(function () {\r\n    // Here we gave generic names like value and setValue because the idea of this hook is to easily reuse it in other projects\r\n    const storedValue = localStorage.getItem(\"watched\");\r\n    return JSON.parse(storedValue);\r\n  });\r\n\r\n  useEffect(\r\n    function () {\r\n      localStorage.setItem(\"watched\", JSON.stringify(watched)); // now we don't have to create a new array like [...watched, movie] that we created while doing same this in handleAddWatched() function because this effect will only run after the movies have already been updated.\r\n    },\r\n    [watched] // we want this effect to run each time the eatched movies are updated so we passed watched state in dependency array. Also, now we can see that on deleting a movie from watched list on screen(so deleting a movie from watched array), it also gets deleted from local storage. This is because thanks to our effect here, we have effectively synchronized the watched state with our local storage. So when the watched state changes, our local storage changes as well. So this is a great advantage of using useEffect() hook instead of setting local storage in the event handler because then we would also have to manually set local storage in the handleDeleteWatched() function as we delete a movie. Now if we did so, there to inside setItem(), in place of actual data, instead of writing watched directly(so using watched state directly), we would have to write watched.filter((movie) => movie.imdbID !== id)(This is how we set in the setWatched in the handleDeleteWatched() function)\r\n  );\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,SAASC,oBAAoBA,CAACC,YAAY,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,YAAY;IAC7C;IACA,MAAMO,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IACnD,OAAOC,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;EAChC,CAAC,CAAC;EAEFN,SAAS,CACP,YAAY;IACVO,YAAY,CAACI,OAAO,CAAC,SAAS,EAAEF,IAAI,CAACG,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5D,CAAC,EACD,CAACA,OAAO,CAAC,CAAC;EAAA,CACX;AACH;AAACV,EAAA,CAbeF,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}