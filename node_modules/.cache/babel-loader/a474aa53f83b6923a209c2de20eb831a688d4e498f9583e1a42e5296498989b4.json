{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\verma\\\\OneDrive\\\\Desktop\\\\Web Dev Adv\\\\React\\\\React\\\\07-usepopcorn\\\\starter\\\\src\\\\StarRating.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: \"16px\"\n}; // this object will never change and it doesn't depend on anything that is in the\n//  StarRating component. So we place it here completely outside of the component. So now\n//  this object will not have to be generated by JS each time the StarRating component is\n//  rendered. It will be created only once when the module is loaded.\n\n// Below is style for the stars container.\nconst starsContainerStyle = {\n  display: \"flex\"\n};\n\n// we want to allow the user of this StarRating component to set the maximum amount of\n// stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component\n// and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating\n// component as prop to set a default value of 5 stars in case the user does not set the\n// max amount of stars. We also improve reusability with props(i.e. defining a public API\n// for consumers to use it (Watch Lecture 118 - Props as a component API for better\n// understanding. Also lecture 119 - Improvong reusability with props)). We do this by, for\n// example passing props like color and size as we did below in StarRating component\n// function and setting a default value for them and then using them inside textStyle\n// object used for styling. this object is not inside component function because everytime\n// style will depend on value passed. Similarly, starStyle object is inside Star component\n// function. We pass in a className prop in StarRating component function in case we want\n// to add some class to the component from css file. We add it to the overall container in\n// the returned JSX. Also, we passed a messages prop which is an empty array by default.\n// Instead of numbers for rating, we can pass in some messages and those messages will be\n// displayed in place of rating. We only want to use this messages array in case there are\n// some values in that array and also the number of elements in the array should be\n// correct(si if we allow for a rating between 1 and 5 and we have only 3 elements in the\n// array then it doesn't make a lot of sense). so we use this messages array in the\n// StarRating component function where the rating is displayed. First we check if the array\n// length is correct, if yes then if tempRating is used, we display message at tempRating â€“\n// 1 otherwise at rating - 1. If array length is not correct, then if rating is a falsy\n// value(i.e. 0) then we will display empty string(i.e.) nothing on the screen. We also\n// pass a defaultRating prop in the StarRating component and we update initialize the\n// rating state based on that.\n\n// The consumer might actually need the rating state of the StarRating component function\n// outside of the component. We can see this in the fact that the Test component in\n// index.js file requires the rating state for displaying in th UI This movie was rated X\n// stars. So what the Test component needs is some state(as we can see it has movieRating\n// state) and it needs to update that state whenever we update the rating state below in\n// the StarRating component. So basically we want to give the consumer of this Test\n// component to pass in a set function. So the consumer specifies an onSetRating handler.\n// In this case what the Test component wants to pass in is the onSetRating function. So we\n// specify this as a prop(receive it in the StarRating component function) and it by\n// default doesn't need any defalut value. Then all we have to do is that in the\n// handleRating() function, we not only set the internal Rating(internal rating is set by\n// the setRating(rating) that we did in the handleRating() function) but also external\n// rating by doing onSetRating(rating). With this we give the outside Test component the\n// ability to get access to the internal state(rating state of the StarRating component)\n// right inside the Test component.\nexport default function StarRating(_ref) {\n  _s();\n  let {\n    maxRating = 5,\n    color = \"#fcc419\",\n    size = 48,\n    className = \"\",\n    messages = [],\n    defaultRating = 0,\n    onSetRating\n  } = _ref;\n  const [rating, setRating] = useState(defaultRating); // this state is used because whenever\n  //                            we click on one of the stars, then we want to display the\n  //                            current rating in the paragraph element. We need to listen\n  //                            for click event on each of the stars so we define a onRate\n  //                            prop in each of the <Star /> component genereated from\n  //                            Array.from() and we will later receive inside the Star\n  //                            component function and pass it in OnClick prop. If we click a\n  //                            star, then from staring upto that star, all stars should be\n  //                            full and rest of the stars should be empty. So, in the Star\n  //                            component function, we receive a full prop which will tell if\n  //                            the star is full and we conditionally render the full and\n  //                            empty stars based on it.\n\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on\n  //                            hover we temporarirly get a rating corresponding to the star\n  //                            we are hovering on and also accordingly the stars appear full\n  //                            or empty. rating and full stars get fixed only on clicking.\n  //                            We handle this hover event in the Star component function by\n  //                            passing a handler function through onHoverIn prop and\n  //                            onHoverOut prop in the Star component in Array.from() and\n  //                            receive them in the Star component function and use inside a\n  //                            onMouseEnter prop and also a onMouseLeave prop.\n\n  function handleRating(rating) {\n    setRating(rating); // setting internal rating of this StarRating component\n    onSetRating(rating); // setting external rating of the Test component\n  }\n\n  const textStyle = {\n    lineHeight: \"1\",\n    margin: \"0\",\n    color,\n    fontSize: `${size / 1.5}px`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: starsContainerStyle,\n      children: Array.from({\n        length: maxRating\n      }, (_, i) => /*#__PURE__*/_jsxDEV(Star, {\n        onRate: () => handleRating(i + 1),\n        full: tempRating ? tempRating >= i + 1 : rating >= i + 1 // this full prop needs\n        //                            to be a true or false value for conditional rendering of full\n        //                            or empty stars in the Star component function. so for each\n        //                            star, current rating is compared with star index + 1. If\n        //                            rating >= index + 1 for a star then that star is full. Also,\n        //                            on hovering, only tempRating works and when we click then\n        //                            full and empty stars get fixed. So, if there is tempRating,\n        //                            then it works otherwise rating works. So if we click on a\n        //                            star then full and empty stars and correct rating are shown\n        //                            accordingly but if we hover again then again tempRating is\n        //                            there so tempRating now works and on hovering, the stars from\n        //                            starting upto that star appear hovered and the rating that\n        //                            should be if we click that star appear but if we stop\n        //                            hovering on any star, then again the fixed full and empty\n        //                            stars with the fixed rating that was done before due to click\n        //                            appear again. Similarly where we display rating, we do\n        //                            tempRating || rating || \"\"\n        ,\n        onHoverIn: () => setTempRating(i + 1) // here we just have to set the tempRating\n        //                                              to the rating of the current star on hover.\n        ,\n        onHoverOut: () => setTempRating(0) // on hover out, we set tempRating back to\n        //                                               initial value\n        ,\n        color: color,\n        size: size\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: textStyle,\n      children: messages.length === maxRating ? messages[tempRating ? tempRating - 1 : rating - 1] : tempRating || rating || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(StarRating, \"zxHW7770npoHJ7dui4KswdCD1RI=\");\n_c = StarRating;\nfunction Star(_ref2) {\n  let {\n    onRate,\n    full,\n    onHoverIn,\n    onHoverOut,\n    color,\n    size\n  } = _ref2;\n  const starStyle = {\n    width: `${size}px`,\n    height: `${size}px`,\n    display: \"block\",\n    cursor: \"pointer\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    role: \"button\",\n    style: starStyle,\n    onClick: onRate,\n    onMouseEnter: onHoverIn,\n    onMouseLeave: onHoverOut,\n    children: full ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      fill: color,\n      stroke: color,\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: \"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"none\",\n      viewBox: \"0 0 24 24\",\n      stroke: color,\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"{2}\",\n        d: \"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\n_c2 = Star;\nvar _c, _c2;\n$RefreshReg$(_c, \"StarRating\");\n$RefreshReg$(_c2, \"Star\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","containerStyle","display","alignItems","gap","starsContainerStyle","StarRating","_ref","_s","maxRating","color","size","className","messages","defaultRating","onSetRating","rating","setRating","tempRating","setTempRating","handleRating","textStyle","lineHeight","margin","fontSize","style","children","Array","from","length","_","i","Star","onRate","full","onHoverIn","onHoverOut","fileName","_jsxFileName","lineNumber","columnNumber","_c","_ref2","starStyle","width","height","cursor","role","onClick","onMouseEnter","onMouseLeave","xmlns","viewBox","fill","stroke","d","strokeLinecap","strokeLinejoin","strokeWidth","_c2","$RefreshReg$"],"sources":["C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/src/StarRating.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst containerStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  gap: \"16px\",\r\n}; // this object will never change and it doesn't depend on anything that is in the\r\n  //  StarRating component. So we place it here completely outside of the component. So now\r\n  //  this object will not have to be generated by JS each time the StarRating component is\r\n  //  rendered. It will be created only once when the module is loaded.\r\n\r\n// Below is style for the stars container.\r\nconst starsContainerStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\n  // we want to allow the user of this StarRating component to set the maximum amount of\r\n  // stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component\r\n  // and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating\r\n  // component as prop to set a default value of 5 stars in case the user does not set the\r\n  // max amount of stars. We also improve reusability with props(i.e. defining a public API\r\n  // for consumers to use it (Watch Lecture 118 - Props as a component API for better\r\n  // understanding. Also lecture 119 - Improvong reusability with props)). We do this by, for\r\n  // example passing props like color and size as we did below in StarRating component\r\n  // function and setting a default value for them and then using them inside textStyle\r\n  // object used for styling. this object is not inside component function because everytime\r\n  // style will depend on value passed. Similarly, starStyle object is inside Star component\r\n  // function. We pass in a className prop in StarRating component function in case we want\r\n  // to add some class to the component from css file. We add it to the overall container in\r\n  // the returned JSX. Also, we passed a messages prop which is an empty array by default.\r\n  // Instead of numbers for rating, we can pass in some messages and those messages will be\r\n  // displayed in place of rating. We only want to use this messages array in case there are\r\n  // some values in that array and also the number of elements in the array should be\r\n  // correct(si if we allow for a rating between 1 and 5 and we have only 3 elements in the\r\n  // array then it doesn't make a lot of sense). so we use this messages array in the\r\n  // StarRating component function where the rating is displayed. First we check if the array\r\n  // length is correct, if yes then if tempRating is used, we display message at tempRating â€“\r\n  // 1 otherwise at rating - 1. If array length is not correct, then if rating is a falsy\r\n  // value(i.e. 0) then we will display empty string(i.e.) nothing on the screen. We also\r\n  // pass a defaultRating prop in the StarRating component and we update initialize the\r\n  // rating state based on that.\r\n\r\n  // The consumer might actually need the rating state of the StarRating component function\r\n  // outside of the component. We can see this in the fact that the Test component in\r\n  // index.js file requires the rating state for displaying in th UI This movie was rated X\r\n  // stars. So what the Test component needs is some state(as we can see it has movieRating\r\n  // state) and it needs to update that state whenever we update the rating state below in\r\n  // the StarRating component. So basically we want to give the consumer of this Test\r\n  // component to pass in a set function. So the consumer specifies an onSetRating handler.\r\n  // In this case what the Test component wants to pass in is the onSetRating function. So we\r\n  // specify this as a prop(receive it in the StarRating component function) and it by\r\n  // default doesn't need any defalut value. Then all we have to do is that in the\r\n  // handleRating() function, we not only set the internal Rating(internal rating is set by\r\n  // the setRating(rating) that we did in the handleRating() function) but also external\r\n  // rating by doing onSetRating(rating). With this we give the outside Test component the\r\n  // ability to get access to the internal state(rating state of the StarRating component)\r\n  // right inside the Test component.\r\nexport default function StarRating({\r\n  maxRating = 5,\r\n  color = \"#fcc419\",\r\n  size = 48,\r\n  className = \"\",\r\n  messages = [],\r\n  defaultRating = 0,\r\n  onSetRating,\r\n}) {\r\n  const [rating, setRating] = useState(defaultRating); // this state is used because whenever\r\n  //                            we click on one of the stars, then we want to display the\r\n  //                            current rating in the paragraph element. We need to listen\r\n  //                            for click event on each of the stars so we define a onRate\r\n  //                            prop in each of the <Star /> component genereated from\r\n  //                            Array.from() and we will later receive inside the Star\r\n  //                            component function and pass it in OnClick prop. If we click a\r\n  //                            star, then from staring upto that star, all stars should be\r\n  //                            full and rest of the stars should be empty. So, in the Star\r\n  //                            component function, we receive a full prop which will tell if\r\n  //                            the star is full and we conditionally render the full and\r\n  //                            empty stars based on it.\r\n\r\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on\r\n  //                            hover we temporarirly get a rating corresponding to the star\r\n  //                            we are hovering on and also accordingly the stars appear full\r\n  //                            or empty. rating and full stars get fixed only on clicking.\r\n  //                            We handle this hover event in the Star component function by\r\n  //                            passing a handler function through onHoverIn prop and\r\n  //                            onHoverOut prop in the Star component in Array.from() and\r\n  //                            receive them in the Star component function and use inside a\r\n  //                            onMouseEnter prop and also a onMouseLeave prop.\r\n\r\n  function handleRating(rating) {\r\n    setRating(rating); // setting internal rating of this StarRating component\r\n    onSetRating(rating); // setting external rating of the Test component\r\n  }\r\n\r\n  const textStyle = {\r\n    lineHeight: \"1\",\r\n    margin: \"0\",\r\n    color,\r\n    fontSize: `${size / 1.5}px`,\r\n  };\r\n\r\n  return (\r\n    <div style={containerStyle} className={className}>\r\n      <div style={starsContainerStyle}>\r\n        {Array.from({ length: maxRating }, (_, i) => (\r\n          <Star\r\n            key={i}\r\n            onRate={() => handleRating(i + 1)}\r\n            full={tempRating ? tempRating >= i + 1 : rating >= i + 1} // this full prop needs\r\n  //                            to be a true or false value for conditional rendering of full\r\n  //                            or empty stars in the Star component function. so for each\r\n  //                            star, current rating is compared with star index + 1. If\r\n  //                            rating >= index + 1 for a star then that star is full. Also,\r\n  //                            on hovering, only tempRating works and when we click then\r\n  //                            full and empty stars get fixed. So, if there is tempRating,\r\n  //                            then it works otherwise rating works. So if we click on a\r\n  //                            star then full and empty stars and correct rating are shown\r\n  //                            accordingly but if we hover again then again tempRating is\r\n  //                            there so tempRating now works and on hovering, the stars from\r\n  //                            starting upto that star appear hovered and the rating that\r\n  //                            should be if we click that star appear but if we stop\r\n  //                            hovering on any star, then again the fixed full and empty\r\n  //                            stars with the fixed rating that was done before due to click\r\n  //                            appear again. Similarly where we display rating, we do\r\n  //                            tempRating || rating || \"\"\r\n            onHoverIn={() => setTempRating(i + 1)} // here we just have to set the tempRating\r\n  //                                              to the rating of the current star on hover.\r\n            onHoverOut={() => setTempRating(0)} // on hover out, we set tempRating back to\r\n  //                                               initial value\r\n            color={color}\r\n            size={size}\r\n          />\r\n        ))}\r\n      </div>\r\n      <p style={textStyle}>\r\n        {messages.length === maxRating\r\n          ? messages[tempRating ? tempRating - 1 : rating - 1]\r\n          : tempRating || rating || \"\"}\r\n      </p>\r\n      {/* First we check if the array length is correct, if yes then if tempRating is used,\r\n          we display message at tempRating - 1 otherwise at rating - 1. If array length is\r\n          not correct, then if rating is a falsy value(i.e. 0) then we will display empty\r\n          string(i.e.) nothing on the screen */}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Star({ onRate, full, onHoverIn, onHoverOut, color, size }) {\r\n  const starStyle = {\r\n    width: `${size}px`,\r\n    height: `${size}px`,\r\n    display: \"block\",\r\n    cursor: \"pointer\",\r\n  };\r\n\r\n  return (\r\n    <span\r\n      role=\"button\"\r\n      style={starStyle}\r\n      onClick={onRate}\r\n      onMouseEnter={onHoverIn}\r\n      onMouseLeave={onHoverOut}\r\n    >\r\n      {full ? (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill={color}\r\n          stroke={color}\r\n        >\r\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke={color}\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"{2}\"\r\n            d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n          />\r\n        </svg>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\n\r\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}