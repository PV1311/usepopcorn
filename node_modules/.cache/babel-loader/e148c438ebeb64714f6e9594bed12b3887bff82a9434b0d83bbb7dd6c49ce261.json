{"ast":null,"code":"import _slicedToArray from\"C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var containerStyle={display:\"flex\",alignItems:\"center\",gap:\"16px\"};// this object will never change and it doesn't depend on anything that is in the\n//  StarRating component. So we place it here completely outside of the component. So now\n//  this object will not have to be generated by JS each time the StarRating component is\n//  rendered. It will be created only once when the module is loaded.\n// Below is style for the stars container.\nvar starsContainerStyle={display:\"flex\"};// we want to allow the user of this StarRating component to set the maximum amount of\n// stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component\n// and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating\n// component as prop to set a default value of 5 stars in case the user does not set the\n// max amount of stars. We also improve reusability with props(i.e. defining a public API\n// for consumers to use it (Watch Lecture 118 - Props as a component API for better\n// understanding. Also lecture 119 - Improvong reusability with props)). We do this by, for\n// example passing props like color and size as we did below in StarRating component\n// function and setting a default value for them and then using them inside textStyle\n// object used for styling. This object is now inside component function because everytime\n// style will depend on value passed. Similarly, starStyle object is inside Star component\n// function. We pass in a className prop in StarRating component function in case we want\n// to add some class to the component from css file. We add it to the overall container in\n// the returned JSX. Also, we passed a messages prop which is an empty array by default.\n// Instead of numbers for rating, we can pass in some messages and those messages will be\n// displayed in place of rating. We only want to use this messages array in case there are\n// some values in that array and also the number of elements in the array should be\n// correct(so if we allow for a rating between 1 and 5 and we have only 3 elements in the\n// array then it doesn't make a lot of sense). so we use this messages array in the\n// StarRating component function where the rating is displayed. First we check if the array\n// length is correct, if yes then if tempRating is used, we display message at tempRating â€“\n// 1 otherwise at rating - 1. If array length is not correct, then if rating is a falsy\n// value(i.e. 0) then we will display empty string(i.e.) nothing on the screen. We also\n// pass a defaultRating prop in the StarRating component and we initialize the rating state\n// based on that.\n// The consumer might actually need the rating state of the StarRating component function\n// outside of the component. We can see this in the fact that the Test component in\n// index.js file requires the rating state for displaying in th UI This movie was rated X\n// stars. So what the Test component needs is some state(as we can see it has movieRating\n// state) and it needs to update that state whenever we update the rating state below in\n// the StarRating component. So basically we want to give the consumer of this Test\n// component to pass in a set function. So the consumer specifies an onSetRating handler.\n// In this case what the Test component wants to pass in is the onSetRating function. So we\n// specify this as a prop(receive it in the StarRating component function) and it by\n// default doesn't need any defalut value. Then all we have to do is that in the\n// handleRating() function, we not only set the internal Rating(internal rating is set by\n// the setRating(rating) that we did in the handleRating() function) but also external\n// rating by doing onSetRating(rating). With this we give the outside Test component the\n// ability to get access to the internal state(rating state of the StarRating component)\n// right inside the Test component.\n// With propTypes, we can specify the type of value that we expect the consumer of the\n// component to pass in for each of the props. For example, we can specify that the\n// maxRating must be a number and nothing else. This is called type checking. If we\n// really care about this, we should just use TypeScript instead of JavaScript. Here we\n// use the built in porpTypes. For that we import it at the top. To do the type checking,\n// we use the component and we define the propTypes property on it and then we assign\n// those propTypes an object as just below(note that while importing at top, the first\n// letter 'P' is capital while defining the propType property on component below, the\n// first letter 'p) is small case:\nexport default function StarRating(_ref){var _ref$maxRating=_ref.maxRating,maxRating=_ref$maxRating===void 0?5:_ref$maxRating,_ref$color=_ref.color,color=_ref$color===void 0?\"#fcc419\":_ref$color,_ref$size=_ref.size,size=_ref$size===void 0?48:_ref$size,_ref$className=_ref.className,className=_ref$className===void 0?\"\":_ref$className,_ref$messages=_ref.messages,messages=_ref$messages===void 0?[]:_ref$messages,_ref$defaultRating=_ref.defaultRating,defaultRating=_ref$defaultRating===void 0?0:_ref$defaultRating,onSetRating=_ref.onSetRating;var _useState=useState(defaultRating),_useState2=_slicedToArray(_useState,2),rating=_useState2[0],setRating=_useState2[1];// this state is used because whenever\n//                            we click on one of the stars, then we want to display the\n//                            current rating in the paragraph element. We need to listen\n//                            for click event on each of the stars so we define a onRate\n//                            prop in each of the <Star /> component genereated from\n//                            Array.from() and we will later receive inside the Star\n//                            component function and pass it in OnClick prop. If we click a\n//                            star, then from staring upto that star, all stars should be\n//                            full and rest of the stars should be empty. So, in the Star\n//                            component function, we receive a full prop which will tell if\n//                            the star is full and we conditionally render the full and\n//                            empty stars based on it.\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),tempRating=_useState4[0],setTempRating=_useState4[1];// this state is for hover because on\n//                            hover we temporarily get a rating corresponding to the star\n//                            we are hovering on and also accordingly the stars appear full\n//                            or empty. rating and full stars get fixed only on clicking.\n//                            We handle this hover event in the Star component function by\n//                            passing a handler function through onHoverIn prop and\n//                            onHoverOut prop in the Star component in Array.from() and\n//                            receive them in the Star component function and use inside a\n//                            onMouseEnter prop and also a onMouseLeave prop.\nfunction handleRating(rating){setRating(rating);// setting internal rating of this StarRating component\nonSetRating(rating);// setting external rating of the Test component\n}var textStyle={lineHeight:\"1\",margin:\"0\",color:color,fontSize:\"\".concat(size/1.5,\"px\")};return/*#__PURE__*/_jsxs(\"div\",{style:containerStyle,className:className,children:[/*#__PURE__*/_jsx(\"div\",{style:starsContainerStyle,children:Array.from({length:maxRating},function(_,i){return/*#__PURE__*/_jsx(Star,{onRate:function onRate(){return handleRating(i+1);},full:tempRating?tempRating>=i+1:rating>=i+1// this full prop needs\n//                            to be a true or false value for conditional rendering of full\n//                            or empty stars in the Star component function. so for each\n//                            star, current rating is compared with star index + 1. If\n//                            rating >= index + 1 for a star then that star is full. Also,\n//                            on hovering, only tempRating works and when we click then\n//                            full and empty stars get fixed. So, if there is tempRating,\n//                            then it works otherwise rating works. So if we click on a\n//                            star then full and empty stars and correct rating are shown\n//                            accordingly but if we hover again then again tempRating is\n//                            there so tempRating now works and on hovering, the stars from\n//                            starting upto that star appear hovered and the rating that\n//                            should be if we click that star appear but if we stop\n//                            hovering on any star, then again the fixed full and empty\n//                            stars with the fixed rating that was done before due to click\n//                            appear again. Similarly where we display rating, we do\n//                            tempRating || rating || \"\"\n,onHoverIn:function onHoverIn(){return setTempRating(i+1);}// here we just have to set the tempRating\n//                                              to the rating of the current star on hover.\n,onHoverOut:function onHoverOut(){return setTempRating(0);}// on hover out, we set tempRating back to\n//                                               initial value\n,color:color,size:size},i);})}),/*#__PURE__*/_jsx(\"p\",{style:textStyle,children:messages.length===maxRating?messages[tempRating?tempRating-1:rating-1]:tempRating||rating||\"\"})]});}function Star(_ref2){var onRate=_ref2.onRate,full=_ref2.full,onHoverIn=_ref2.onHoverIn,onHoverOut=_ref2.onHoverOut,color=_ref2.color,size=_ref2.size;var starStyle={width:\"\".concat(size,\"px\"),height:\"\".concat(size,\"px\"),display:\"block\",cursor:\"pointer\"};return/*#__PURE__*/_jsx(\"span\",{role:\"button\",style:starStyle,onClick:onRate,onMouseEnter:onHoverIn,onMouseLeave:onHoverOut,children:full?/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 20 20\",fill:color,stroke:color,children:/*#__PURE__*/_jsx(\"path\",{d:\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"})}):/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:color,children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:\"{2}\",d:\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"})})});}/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/","map":{"version":3,"names":["useState","jsx","_jsx","jsxs","_jsxs","containerStyle","display","alignItems","gap","starsContainerStyle","StarRating","_ref","_ref$maxRating","maxRating","_ref$color","color","_ref$size","size","_ref$className","className","_ref$messages","messages","_ref$defaultRating","defaultRating","onSetRating","_useState","_useState2","_slicedToArray","rating","setRating","_useState3","_useState4","tempRating","setTempRating","handleRating","textStyle","lineHeight","margin","fontSize","concat","style","children","Array","from","length","_","i","Star","onRate","full","onHoverIn","onHoverOut","_ref2","starStyle","width","height","cursor","role","onClick","onMouseEnter","onMouseLeave","xmlns","viewBox","fill","stroke","d","strokeLinecap","strokeLinejoin","strokeWidth"],"sources":["C:/Users/verma/OneDrive/Desktop/Web Dev Adv/React/React/07-usepopcorn/starter/src/StarRating.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst containerStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  gap: \"16px\",\r\n}; // this object will never change and it doesn't depend on anything that is in the\r\n//  StarRating component. So we place it here completely outside of the component. So now\r\n//  this object will not have to be generated by JS each time the StarRating component is\r\n//  rendered. It will be created only once when the module is loaded.\r\n\r\n// Below is style for the stars container.\r\nconst starsContainerStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\n// we want to allow the user of this StarRating component to set the maximum amount of\r\n// stars(so, the maximum rating). So we pass a maxRating prop to the StarRating component\r\n// and we use it in Array.from() to define length. We pass maxRating = 5 in the StarRating\r\n// component as prop to set a default value of 5 stars in case the user does not set the\r\n// max amount of stars. We also improve reusability with props(i.e. defining a public API\r\n// for consumers to use it (Watch Lecture 118 - Props as a component API for better\r\n// understanding. Also lecture 119 - Improvong reusability with props)). We do this by, for\r\n// example passing props like color and size as we did below in StarRating component\r\n// function and setting a default value for them and then using them inside textStyle\r\n// object used for styling. This object is now inside component function because everytime\r\n// style will depend on value passed. Similarly, starStyle object is inside Star component\r\n// function. We pass in a className prop in StarRating component function in case we want\r\n// to add some class to the component from css file. We add it to the overall container in\r\n// the returned JSX. Also, we passed a messages prop which is an empty array by default.\r\n// Instead of numbers for rating, we can pass in some messages and those messages will be\r\n// displayed in place of rating. We only want to use this messages array in case there are\r\n// some values in that array and also the number of elements in the array should be\r\n// correct(so if we allow for a rating between 1 and 5 and we have only 3 elements in the\r\n// array then it doesn't make a lot of sense). so we use this messages array in the\r\n// StarRating component function where the rating is displayed. First we check if the array\r\n// length is correct, if yes then if tempRating is used, we display message at tempRating â€“\r\n// 1 otherwise at rating - 1. If array length is not correct, then if rating is a falsy\r\n// value(i.e. 0) then we will display empty string(i.e.) nothing on the screen. We also\r\n// pass a defaultRating prop in the StarRating component and we initialize the rating state\r\n// based on that.\r\n\r\n// The consumer might actually need the rating state of the StarRating component function\r\n// outside of the component. We can see this in the fact that the Test component in\r\n// index.js file requires the rating state for displaying in th UI This movie was rated X\r\n// stars. So what the Test component needs is some state(as we can see it has movieRating\r\n// state) and it needs to update that state whenever we update the rating state below in\r\n// the StarRating component. So basically we want to give the consumer of this Test\r\n// component to pass in a set function. So the consumer specifies an onSetRating handler.\r\n// In this case what the Test component wants to pass in is the onSetRating function. So we\r\n// specify this as a prop(receive it in the StarRating component function) and it by\r\n// default doesn't need any defalut value. Then all we have to do is that in the\r\n// handleRating() function, we not only set the internal Rating(internal rating is set by\r\n// the setRating(rating) that we did in the handleRating() function) but also external\r\n// rating by doing onSetRating(rating). With this we give the outside Test component the\r\n// ability to get access to the internal state(rating state of the StarRating component)\r\n// right inside the Test component.\r\n\r\n// With propTypes, we can specify the type of value that we expect the consumer of the\r\n// component to pass in for each of the props. For example, we can specify that the\r\n// maxRating must be a number and nothing else. This is called type checking. If we\r\n// really care about this, we should just use TypeScript instead of JavaScript. Here we\r\n// use the built in porpTypes. For that we import it at the top. To do the type checking,\r\n// we use the component and we define the propTypes property on it and then we assign\r\n// those propTypes an object as just below(note that while importing at top, the first\r\n// letter 'P' is capital while defining the propType property on component below, the\r\n// first letter 'p) is small case:\r\n\r\nStarRating.propTypes = {\r\n  // in this object, for each of the props, we can specify a type(for this we use the\r\n  // PropType object we imported at the top and use one of the validators that is inside\r\n  // this PropType object, just like we did for maxRating prop below):\r\n  maxRating: PropTypes.number,\r\n  // now, since we did maxRating: PropTypes.number, if the consumer specifies a value\r\n  // for this prop which is not a number, an error is generated which can be used for\r\n  // debugging. We could also chain isRequired as maxRating: PropTypes.number.isRequired\r\n  // which will make this maxRating prop necessary to have a value given by the consumer.\r\n  // If no given, an error is generated.\r\n  defaultRating: PropTypes.number,\r\n  color: PropTypes.string,\r\n  size: PropTypes.number,\r\n  messages: PropTypes.array,\r\n  className: PropTypes.string,\r\n  onSetRating: PropTypes.func, // func stands for function. we also have bool for\r\n  //                              boolean and object for object\r\n};\r\n\r\nexport default function StarRating({\r\n  maxRating = 5,\r\n  color = \"#fcc419\",\r\n  size = 48,\r\n  className = \"\",\r\n  messages = [],\r\n  defaultRating = 0,\r\n  onSetRating,\r\n}) {\r\n  const [rating, setRating] = useState(defaultRating); // this state is used because whenever\r\n  //                            we click on one of the stars, then we want to display the\r\n  //                            current rating in the paragraph element. We need to listen\r\n  //                            for click event on each of the stars so we define a onRate\r\n  //                            prop in each of the <Star /> component genereated from\r\n  //                            Array.from() and we will later receive inside the Star\r\n  //                            component function and pass it in OnClick prop. If we click a\r\n  //                            star, then from staring upto that star, all stars should be\r\n  //                            full and rest of the stars should be empty. So, in the Star\r\n  //                            component function, we receive a full prop which will tell if\r\n  //                            the star is full and we conditionally render the full and\r\n  //                            empty stars based on it.\r\n\r\n  const [tempRating, setTempRating] = useState(0); // this state is for hover because on\r\n  //                            hover we temporarily get a rating corresponding to the star\r\n  //                            we are hovering on and also accordingly the stars appear full\r\n  //                            or empty. rating and full stars get fixed only on clicking.\r\n  //                            We handle this hover event in the Star component function by\r\n  //                            passing a handler function through onHoverIn prop and\r\n  //                            onHoverOut prop in the Star component in Array.from() and\r\n  //                            receive them in the Star component function and use inside a\r\n  //                            onMouseEnter prop and also a onMouseLeave prop.\r\n\r\n  function handleRating(rating) {\r\n    setRating(rating); // setting internal rating of this StarRating component\r\n    onSetRating(rating); // setting external rating of the Test component\r\n  }\r\n\r\n  const textStyle = {\r\n    lineHeight: \"1\",\r\n    margin: \"0\",\r\n    color,\r\n    fontSize: `${size / 1.5}px`,\r\n  };\r\n\r\n  return (\r\n    <div style={containerStyle} className={className}>\r\n      <div style={starsContainerStyle}>\r\n        {Array.from({ length: maxRating }, (_, i) => (\r\n          <Star\r\n            key={i}\r\n            onRate={() => handleRating(i + 1)}\r\n            full={tempRating ? tempRating >= i + 1 : rating >= i + 1} // this full prop needs\r\n            //                            to be a true or false value for conditional rendering of full\r\n            //                            or empty stars in the Star component function. so for each\r\n            //                            star, current rating is compared with star index + 1. If\r\n            //                            rating >= index + 1 for a star then that star is full. Also,\r\n            //                            on hovering, only tempRating works and when we click then\r\n            //                            full and empty stars get fixed. So, if there is tempRating,\r\n            //                            then it works otherwise rating works. So if we click on a\r\n            //                            star then full and empty stars and correct rating are shown\r\n            //                            accordingly but if we hover again then again tempRating is\r\n            //                            there so tempRating now works and on hovering, the stars from\r\n            //                            starting upto that star appear hovered and the rating that\r\n            //                            should be if we click that star appear but if we stop\r\n            //                            hovering on any star, then again the fixed full and empty\r\n            //                            stars with the fixed rating that was done before due to click\r\n            //                            appear again. Similarly where we display rating, we do\r\n            //                            tempRating || rating || \"\"\r\n            onHoverIn={() => setTempRating(i + 1)} // here we just have to set the tempRating\r\n            //                                              to the rating of the current star on hover.\r\n            onHoverOut={() => setTempRating(0)} // on hover out, we set tempRating back to\r\n            //                                               initial value\r\n            color={color}\r\n            size={size}\r\n          />\r\n        ))}\r\n      </div>\r\n      <p style={textStyle}>\r\n        {messages.length === maxRating\r\n          ? messages[tempRating ? tempRating - 1 : rating - 1]\r\n          : tempRating || rating || \"\"}\r\n      </p>\r\n      {/* First we check if the array length is correct, if yes then if tempRating is used,\r\n          we display message at tempRating - 1 otherwise at rating - 1. If array length is\r\n          not correct, then if rating is a falsy value(i.e. 0) then we will display empty\r\n          string(i.e.) nothing on the screen */}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Star({ onRate, full, onHoverIn, onHoverOut, color, size }) {\r\n  const starStyle = {\r\n    width: `${size}px`,\r\n    height: `${size}px`,\r\n    display: \"block\",\r\n    cursor: \"pointer\",\r\n  };\r\n\r\n  return (\r\n    <span\r\n      role=\"button\"\r\n      style={starStyle}\r\n      onClick={onRate}\r\n      onMouseEnter={onHoverIn}\r\n      onMouseLeave={onHoverOut}\r\n    >\r\n      {full ? (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill={color}\r\n          stroke={color}\r\n        >\r\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke={color}\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"{2}\"\r\n            d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n          />\r\n        </svg>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\n/*\r\nFULL STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"0 0 20 20\"\r\n  fill=\"#000\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"\r\n  />\r\n</svg>\r\n\r\n\r\nEMPTY STAR\r\n\r\n<svg\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  fill=\"none\"\r\n  viewBox=\"0 0 24 24\"\r\n  stroke=\"#000\"\r\n>\r\n  <path\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"{2}\"\r\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\r\n  />\r\n</svg>\r\n\r\n*/\r\n"],"mappings":"mKAAA,OAASA,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAGjC,GAAM,CAAAC,cAAc,CAAG,CACrBC,OAAO,CAAE,MAAM,CACfC,UAAU,CAAE,QAAQ,CACpBC,GAAG,CAAE,MACP,CAAC,CAAE;AACH;AACA;AACA;AAEA;AACA,GAAM,CAAAC,mBAAmB,CAAG,CAC1BH,OAAO,CAAE,MACX,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA,cAAe,SAAS,CAAAI,UAAUA,CAAAC,IAAA,CAQ/B,KAAAC,cAAA,CAAAD,IAAA,CAPDE,SAAS,CAATA,SAAS,CAAAD,cAAA,UAAG,CAAC,CAAAA,cAAA,CAAAE,UAAA,CAAAH,IAAA,CACbI,KAAK,CAALA,KAAK,CAAAD,UAAA,UAAG,SAAS,CAAAA,UAAA,CAAAE,SAAA,CAAAL,IAAA,CACjBM,IAAI,CAAJA,IAAI,CAAAD,SAAA,UAAG,EAAE,CAAAA,SAAA,CAAAE,cAAA,CAAAP,IAAA,CACTQ,SAAS,CAATA,SAAS,CAAAD,cAAA,UAAG,EAAE,CAAAA,cAAA,CAAAE,aAAA,CAAAT,IAAA,CACdU,QAAQ,CAARA,QAAQ,CAAAD,aAAA,UAAG,EAAE,CAAAA,aAAA,CAAAE,kBAAA,CAAAX,IAAA,CACbY,aAAa,CAAbA,aAAa,CAAAD,kBAAA,UAAG,CAAC,CAAAA,kBAAA,CACjBE,WAAW,CAAAb,IAAA,CAAXa,WAAW,CAEX,IAAAC,SAAA,CAA4BzB,QAAQ,CAACuB,aAAa,CAAC,CAAAG,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA5CG,MAAM,CAAAF,UAAA,IAAEG,SAAS,CAAAH,UAAA,IAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAAI,UAAA,CAAoC9B,QAAQ,CAAC,CAAC,CAAC,CAAA+B,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAxCE,UAAU,CAAAD,UAAA,IAAEE,aAAa,CAAAF,UAAA,IAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAS,CAAAG,YAAYA,CAACN,MAAM,CAAE,CAC5BC,SAAS,CAACD,MAAM,CAAC,CAAE;AACnBJ,WAAW,CAACI,MAAM,CAAC,CAAE;AACvB,CAEA,GAAM,CAAAO,SAAS,CAAG,CAChBC,UAAU,CAAE,GAAG,CACfC,MAAM,CAAE,GAAG,CACXtB,KAAK,CAALA,KAAK,CACLuB,QAAQ,IAAAC,MAAA,CAAKtB,IAAI,CAAG,GAAG,MACzB,CAAC,CAED,mBACEb,KAAA,QAAKoC,KAAK,CAAEnC,cAAe,CAACc,SAAS,CAAEA,SAAU,CAAAsB,QAAA,eAC/CvC,IAAA,QAAKsC,KAAK,CAAE/B,mBAAoB,CAAAgC,QAAA,CAC7BC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE/B,SAAU,CAAC,CAAE,SAACgC,CAAC,CAAEC,CAAC,qBACtC5C,IAAA,CAAC6C,IAAI,EAEHC,MAAM,CAAE,SAAAA,OAAA,QAAM,CAAAd,YAAY,CAACY,CAAC,CAAG,CAAC,CAAC,EAAC,CAClCG,IAAI,CAAEjB,UAAU,CAAGA,UAAU,EAAIc,CAAC,CAAG,CAAC,CAAGlB,MAAM,EAAIkB,CAAC,CAAG,CAAG;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACAI,SAAS,CAAE,SAAAA,UAAA,QAAM,CAAAjB,aAAa,CAACa,CAAC,CAAG,CAAC,CAAC,EAAE;AACvC;AAAA,CACAK,UAAU,CAAE,SAAAA,WAAA,QAAM,CAAAlB,aAAa,CAAC,CAAC,CAAC,EAAE;AACpC;AAAA,CACAlB,KAAK,CAAEA,KAAM,CACbE,IAAI,CAAEA,IAAK,EAxBN6B,CAAC,CAyBN,EACH,CAAC,EACE,cACN5C,IAAA,MAAGsC,KAAK,CAAEL,SAAU,CAAAM,QAAA,CACjBpB,QAAQ,CAACuB,MAAM,GAAK/B,SAAS,CAC1BQ,QAAQ,CAACW,UAAU,CAAGA,UAAU,CAAG,CAAC,CAAGJ,MAAM,CAAG,CAAC,CAAC,CAClDI,UAAU,EAAIJ,MAAM,EAAI,EAAE,EAC5B,GAKA,CAEV,CAEA,QAAS,CAAAmB,IAAIA,CAAAK,KAAA,CAAuD,IAApD,CAAAJ,MAAM,CAAAI,KAAA,CAANJ,MAAM,CAAEC,IAAI,CAAAG,KAAA,CAAJH,IAAI,CAAEC,SAAS,CAAAE,KAAA,CAATF,SAAS,CAAEC,UAAU,CAAAC,KAAA,CAAVD,UAAU,CAAEpC,KAAK,CAAAqC,KAAA,CAALrC,KAAK,CAAEE,IAAI,CAAAmC,KAAA,CAAJnC,IAAI,CAC9D,GAAM,CAAAoC,SAAS,CAAG,CAChBC,KAAK,IAAAf,MAAA,CAAKtB,IAAI,MAAI,CAClBsC,MAAM,IAAAhB,MAAA,CAAKtB,IAAI,MAAI,CACnBX,OAAO,CAAE,OAAO,CAChBkD,MAAM,CAAE,SACV,CAAC,CAED,mBACEtD,IAAA,SACEuD,IAAI,CAAC,QAAQ,CACbjB,KAAK,CAAEa,SAAU,CACjBK,OAAO,CAAEV,MAAO,CAChBW,YAAY,CAAET,SAAU,CACxBU,YAAY,CAAET,UAAW,CAAAV,QAAA,CAExBQ,IAAI,cACH/C,IAAA,QACE2D,KAAK,CAAC,4BAA4B,CAClCC,OAAO,CAAC,WAAW,CACnBC,IAAI,CAAEhD,KAAM,CACZiD,MAAM,CAAEjD,KAAM,CAAA0B,QAAA,cAEdvC,IAAA,SAAM+D,CAAC,CAAC,0VAA0V,EAAG,EACjW,cAEN/D,IAAA,QACE2D,KAAK,CAAC,4BAA4B,CAClCE,IAAI,CAAC,MAAM,CACXD,OAAO,CAAC,WAAW,CACnBE,MAAM,CAAEjD,KAAM,CAAA0B,QAAA,cAEdvC,IAAA,SACEgE,aAAa,CAAC,OAAO,CACrBC,cAAc,CAAC,OAAO,CACtBC,WAAW,CAAC,KAAK,CACjBH,CAAC,CAAC,yWAAyW,EAC3W,EAEL,EACI,CAEX,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}